<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(Unresolved) Connect the Cities</title>
    <url>/2020/05/07/(Unresolved)%20Connect%20the%20Cities/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3371" target="_blank" rel="noopener">HDUOJ 3371</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>In 2100, since the sea level rise, most of the cities disappear. Though some survived cities are still connected with others, but most of them become disconnected. The government wants to build some roads to connect all of these cities again, but they don’t want to take too much money. </p>
<h2><span id="input">Input</span></h2><p>The first line contains the number of test cases.<br>Each test case starts with three integers: n, m and k. n (3 &lt;= n &lt;=500) stands for the number of survived cities, m (0 &lt;= m &lt;= 25000) stands for the number of roads you can choose to connect the cities and k (0 &lt;= k &lt;= 100) stands for the number of still connected cities.<br>To make it easy, the cities are signed from 1 to n.<br>Then follow m lines, each contains three integers p, q and c (0 &lt;= c &lt;= 1000), means it takes c to connect p and q.<br>Then follow k lines, each line starts with an integer t (2 &lt;= t &lt;= n) stands for the number of this connected cities. Then t integers follow stands for the id of these cities.</p>
<h2><span id="output">Output</span></h2><p>For each case, output the least money you need to take, if it’s impossible, just output -1. </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">6 4 3</span><br><span class="line">1 4 2</span><br><span class="line">2 6 1</span><br><span class="line">2 3 5</span><br><span class="line">3 4 33</span><br><span class="line">2 1 2</span><br><span class="line">2 1 3</span><br><span class="line">3 4 5 6</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-unresolved">My Solution (Unresolved)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">500</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M=<span class="number">25000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">9999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="keyword">int</span> par[MAX_N];</span><br><span class="line"><span class="keyword">int</span> ranker[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ranker[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x]==x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> par[x]=findroot(par[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=findroot(x);</span><br><span class="line">    y=findroot(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ranker[x]&lt;ranker[y]) &#123;</span><br><span class="line">            par[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            par[y]=x;</span><br><span class="line">            <span class="keyword">if</span> (ranker[x]==ranker[y]) &#123;</span><br><span class="line">                ranker[x]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> findroot(x)==findroot(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,cost;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> min_cost[MAX_N];</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line">edge es[MAX_M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> edge &amp;a,<span class="keyword">const</span> edge &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.cost&lt;b.cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            min_cost[i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;es[i].u&gt;&gt;es[i].v&gt;&gt;es[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">        init(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">            <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> y;<span class="built_in">cin</span>&gt;&gt;y;</span><br><span class="line">                unite(x,y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(es,es+m,comp);</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            edge e=es[i];</span><br><span class="line">            <span class="keyword">if</span> (!same(e.u,e.v)) &#123;</span><br><span class="line">                unite(e.u,e.v);</span><br><span class="line">                res+=e.cost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>图</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title>(Unresolved) Crane</title>
    <url>/2020/05/09/(Unresolved)%20Crane/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=2991" target="_blank" rel="noopener">POJ 2991</a></center></p>

<h2><span id="description">Description</span></h2><p>ACM has bought a new crane (crane – jeřáb) . The crane consists of n segments of various lengths, connected by flexible joints. The end of the i-th segment is joined to the beginning of the i + 1-th one, for 1 ≤ i &lt; n. The beginning of the first segment is fixed at point with coordinates (0, 0) and its end at point with coordinates (0, w), where w is the length of the first segment. All of the segments lie always in one plane, and the joints allow arbitrary rotation in that plane. After series of unpleasant accidents, it was decided that software that controls the crane must contain a piece of code that constantly checks the position of the end of crane, and stops the crane if a collision should happen. </p>
<p>Your task is to write a part of this software that determines the position of the end of the n-th segment after each command. The state of the crane is determined by the angles between consecutive segments. Initially, all of the angles are straight, i.e., 180o. The operator issues commands that change the angle in exactly one joint. </p>
<h2><span id="input">Input</span></h2><p>The input consists of several instances, separated by single empty lines. </p>
<p>The first line of each instance consists of two integers 1 ≤ n ≤10 000 and c 0 separated by a single space – the number of segments of the crane and the number of commands. The second line consists of n integers l1,…, ln (1 li 100) separated by single spaces. The length of the i-th segment of the crane is li. The following c lines specify the commands of the operator. Each line describing the command consists of two integers s and a (1 ≤ s &lt; n, 0 ≤ a ≤ 359) separated by a single space – the order to change the angle between the s-th and the s + 1-th segment to a degrees (the angle is measured counterclockwise from the s-th to the s + 1-th segment). </p>
<h2><span id="output">Output</span></h2><p>The output for each instance consists of c lines. The i-th of the lines consists of two rational numbers x and y separated by a single space – the coordinates of the end of the n-th segment after the i-th command, rounded to two digits after the decimal point. </p>
<p>The outputs for each two consecutive instances must be separated by a single empty line. </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 1</span><br><span class="line">10 5</span><br><span class="line">1 90</span><br><span class="line"></span><br><span class="line">3 2</span><br><span class="line">5 5 5</span><br><span class="line">1 270</span><br><span class="line">2 90</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">5.00</span> <span class="number">10.00</span></span><br><span class="line"></span><br><span class="line"><span class="number">-10.00</span> <span class="number">5.00</span></span><br><span class="line"><span class="number">-5.00</span> <span class="number">10.00</span></span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-unresolved">My Solution (Unresolved)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI=<span class="number">3.1415926535897932384</span>;</span><br><span class="line"><span class="keyword">int</span> N,C;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segment</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> xLen;</span><br><span class="line">    <span class="keyword">double</span> yLen;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">segment dat[<span class="number">2</span>*MAX_N<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n_)</span></span>&#123;</span><br><span class="line">    n=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&lt;n_) n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++) dat[i].xLen=dat[i].yLen=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateAngle</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">double</span> a)</span></span>&#123;</span><br><span class="line">    k+=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">double</span> dx=dat[k].xLen,dy=dat[k].yLen;</span><br><span class="line">    <span class="keyword">double</span> len=<span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">    dx=len*<span class="built_in">sin</span>(a);dy=len*<span class="built_in">cos</span>(a);</span><br><span class="line">    dat[k].xLen=dx;dat[k].yLen=dy;</span><br><span class="line">    <span class="keyword">while</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        k=(k<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        dat[k].xLen=dat[k*<span class="number">2</span>+<span class="number">1</span>].xLen+dat[k*<span class="number">2</span>+<span class="number">2</span>].xLen;</span><br><span class="line">        dat[k].yLen=dat[k*<span class="number">2</span>+<span class="number">1</span>].yLen+dat[k*<span class="number">2</span>+<span class="number">2</span>].yLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;C;</span><br><span class="line">    init(N);</span><br><span class="line">    <span class="keyword">int</span> all=<span class="number">0</span>,len=n;</span><br><span class="line">    <span class="keyword">while</span> (len&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        len/=<span class="number">2</span>;</span><br><span class="line">        all+=len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=all; i&lt;all+N; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;dat[i].yLen;</span><br><span class="line">    &#125;</span><br><span class="line">    updateAngle(all,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> s;<span class="keyword">double</span> a;<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;a;</span><br><span class="line">        a=(<span class="number">1</span>-(<span class="keyword">double</span>)a/<span class="number">180</span>)*PI;</span><br><span class="line">        <span class="keyword">while</span> (s&lt;N) &#123;</span><br><span class="line">            a+=<span class="built_in">atan</span>(dat[s<span class="number">-1</span>].xLen/dat[s<span class="number">-1</span>].yLen);</span><br><span class="line">            updateAngle(s,a);</span><br><span class="line">            s++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;dat[<span class="number">0</span>].xLen&lt;&lt;<span class="string">" "</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;dat[<span class="number">0</span>].yLen&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>(Unresolved) I Hate It</title>
    <url>/2020/05/09/(Unresolved)%20I%20Hate%20It/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1754" target="_blank" rel="noopener">HDUOJ 1754</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。</p>
<p>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。</p>
<h2><span id="input">Input</span></h2><p>本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取’Q’或’U’) ，和两个正整数A，B。<br>当C为’Q’的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为’U’的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。</p>
<h2><span id="output">Output</span></h2><p>对于每一次询问操作，在一行里面输出最高成绩。</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 6</span><br><span class="line">1 2 3 4 5</span><br><span class="line">Q 1 5</span><br><span class="line">U 3 6</span><br><span class="line">Q 3 4</span><br><span class="line">Q 4 5</span><br><span class="line">U 2 9</span><br><span class="line">Q 1 5</span><br></pre></td></tr></table></figure>

<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">6</span><br><span class="line">5</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-unresolved">My Solution (Unresolved)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_M=<span class="number">9999999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,dat[<span class="number">2</span>*MAX_N<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n_)</span></span>&#123;</span><br><span class="line">    n=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&lt;n_) n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++) dat[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    k+=n<span class="number">-1</span>;</span><br><span class="line">    dat[k]=a;</span><br><span class="line">    <span class="keyword">while</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        k=(k<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        dat[k]=<span class="built_in">max</span>(dat[k*<span class="number">2</span>+<span class="number">1</span>],dat[k*<span class="number">2</span>+<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (r&lt;=a||b&lt;=l) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不包含</span></span><br><span class="line">    <span class="keyword">if</span> (a&lt;=l&amp;&amp;r&lt;=b) <span class="keyword">return</span> dat[k];  <span class="comment">//全部包含</span></span><br><span class="line">    <span class="keyword">else</span> &#123;                          <span class="comment">//部分包含</span></span><br><span class="line">        <span class="keyword">int</span> vl=query(a,b,k*<span class="number">2</span>+<span class="number">1</span>,l,(l+r)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> vr=query(a,b,k*<span class="number">2</span>+<span class="number">2</span>,(l+r)/<span class="number">2</span>,r);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(vl,vr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,C;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;N&gt;&gt;C) &#123;</span><br><span class="line">        init(N);</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">max</span>=-MAX_M,<span class="built_in">min</span>=MAX_M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d "</span>,&amp;x);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"1:"&lt;&lt;x&lt;&lt;endl;</span></span><br><span class="line">            update(i,x);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">max</span>&lt;x) &#123;</span><br><span class="line">                <span class="built_in">max</span>=x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">min</span>&gt;x) &#123;</span><br><span class="line">                <span class="built_in">min</span>=x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;C; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch;<span class="keyword">int</span> a,b;</span><br><span class="line">            <span class="comment">//cin&gt;&gt;ch&gt;&gt;a&gt;&gt;b;</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c %d %d\n"</span>,&amp;ch,&amp;a,&amp;b);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"2:"&lt;&lt;ch&lt;&lt;" "&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span> (ch==<span class="string">'U'</span>) &#123;</span><br><span class="line">                a--;</span><br><span class="line">                update(a,b);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                a--;b--;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;query(a,b,<span class="number">0</span>,<span class="built_in">min</span>,<span class="built_in">max</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>图</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>(Unresolved) Fishnet</title>
    <url>/2020/05/17/(Unresolved)%20Fishnet/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=1408" target="_blank" rel="noopener">POJ 1408</a></center></p>

<h2><span id="description">Description</span></h2><p>A fisherman named Etadokah awoke in a very small island. He could see calm, beautiful and blue sea around the island. The previous night he had encountered a terrible storm and had reached this uninhabited island. Some wrecks of his ship were spread around him. He found a square wood-frame and a long thread among the wrecks. He had to survive in this island until someone came and saved him. </p>
<p>In order to catch fish, he began to make a kind of fishnet by cutting the long thread into short threads and fixing them at pegs on the square wood-frame. He wanted to know the sizes of the meshes of the fishnet to see whether he could catch small fish as well as large ones. </p>
<p>The wood frame is perfectly square with four thin edges on meter long: a bottom edge, a top edge, a left edge, and a right edge. There are n pegs on each edge, and thus there are 4n pegs in total. The positions of pegs are represented by their (x,y)-coordinates. Those of an example case with n=2 are depicted in figures below. The position of the ith peg on the bottom edge is represented by (ai,0). That on the top edge, on the left edge and on the right edge are represented by (bi,1), (0,ci) and (1,di), respectively. The long thread is cut into 2n threads with appropriate lengths. The threads are strained between (ai,0) and (bi,1),and between (0,ci) and (1,di) (i=1,…,n). </p>
<p>You should write a program that reports the size of the largest mesh among the (n+1)2 meshes of the fishnet made by fixing the threads at the pegs. You may assume that the thread he found is long enough to make the fishnet and the wood-frame is thin enough for neglecting its thickness.<br><img src="http://poj.org/images/1408_1.jpg" alt="img"> </p>
<h2><span id="input">Input</span></h2><p>The input consists of multiple sub-problems followed by a line containing a zero that indicates the end of input. Each sub-problem is given in the following format.<br>n<br>a1 a2 … an<br>b1 b2 … bn<br>c1 c2 … cn<br>d1 d2 … dn<br>you may assume 0 &lt; n &lt;= 30, 0 &lt; ai,bi,ci,di &lt; 1</p>
<h2><span id="output">Output</span></h2><p>For each sub-problem, the size of the largest mesh should be printed followed by a new line. Each value should be represented by 6 digits after the decimal point, and it may not have an error greater than 0.000001.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">0.2000000 0.6000000</span><br><span class="line">0.3000000 0.8000000</span><br><span class="line">0.1000000 0.5000000</span><br><span class="line">0.5000000 0.6000000</span><br><span class="line">2</span><br><span class="line">0.3333330 0.6666670</span><br><span class="line">0.3333330 0.6666670</span><br><span class="line">0.3333330 0.6666670</span><br><span class="line">0.3333330 0.6666670</span><br><span class="line">4</span><br><span class="line">0.2000000 0.4000000 0.6000000 0.8000000</span><br><span class="line">0.1000000 0.5000000 0.6000000 0.9000000</span><br><span class="line">0.2000000 0.4000000 0.6000000 0.8000000</span><br><span class="line">0.1000000 0.5000000 0.6000000 0.9000000</span><br><span class="line">2</span><br><span class="line">0.5138701 0.9476283</span><br><span class="line">0.1717362 0.1757412</span><br><span class="line">0.3086521 0.7022313</span><br><span class="line">0.2264312 0.5345343</span><br><span class="line">1</span><br><span class="line">0.4000000</span><br><span class="line">0.6000000</span><br><span class="line">0.3000000</span><br><span class="line">0.5000000</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.215657</span><br><span class="line">0.111112</span><br><span class="line">0.078923</span><br><span class="line">0.279223</span><br><span class="line">0.348958</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point()=<span class="keyword">default</span>;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> -(<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Vector)&#123;a.x-b.x,a.y-b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Vector&amp; a,<span class="keyword">const</span> Vector&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span> &#123;</span></span><br><span class="line">    Point s,e;</span><br><span class="line">    Line(Point _s,Point _e):s(_s),e(_e)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>,Point&gt; <span class="keyword">operator</span>&amp;(<span class="keyword">const</span> Line &amp;a,<span class="keyword">const</span> Line &amp;b) &#123;</span><br><span class="line">    Point res = a.s;</span><br><span class="line">    <span class="keyword">if</span>(sgn((a.s-a.e)*(b.s-b.e)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sgn((a.s-b.e)*(b.s-b.e)) == <span class="number">0</span>) <span class="keyword">return</span> make_pair(<span class="number">0</span>,res);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> make_pair(<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> t=((a.s-b.s)*(b.s-b.e))/((a.s-a.e)*(b.s-b.e));</span><br><span class="line">    res.x+=(a.e.x-a.s.x)*t;</span><br><span class="line">    res.y+=(a.e.y-a.s.y)*t;</span><br><span class="line">    <span class="keyword">return</span> make_pair(<span class="number">2</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        Point pots[<span class="number">32</span>][<span class="number">32</span>];</span><br><span class="line">        pots[<span class="number">0</span>][<span class="number">0</span>]=Point(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        pots[<span class="number">0</span>][n+<span class="number">1</span>]=Point(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        pots[n+<span class="number">1</span>][<span class="number">0</span>]=Point(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        pots[n+<span class="number">1</span>][n+<span class="number">1</span>]=Point(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;<span class="keyword">double</span> a;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;a);pots[i+<span class="number">1</span>][<span class="number">0</span>]=Point(a,<span class="number">0</span>);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;<span class="keyword">double</span> b;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;b);pots[i+<span class="number">1</span>][n+<span class="number">1</span>]=Point(b,<span class="number">1</span>);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;<span class="keyword">double</span> c;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;c);pots[<span class="number">0</span>][i+<span class="number">1</span>]=Point(<span class="number">0</span>,c);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;<span class="keyword">double</span> d;<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;d);pots[n+<span class="number">1</span>][i+<span class="number">1</span>]=Point(<span class="number">1</span>,d);&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n+<span class="number">1</span>; i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n+<span class="number">1</span>; j++) pots[i][j]=(Line(pots[i][<span class="number">0</span>],pots[i][n+<span class="number">1</span>])&amp;Line(pots[<span class="number">0</span>][j],pots[n+<span class="number">1</span>][j])).second;</span><br><span class="line">        <span class="comment">//for (int j=n+1; j&gt;=0; j--) &#123;for (int i=0; i&lt;n+2; i++) printf("(%lf,%lf)",pots[i][j].x,pots[i][j].y);cout&lt;&lt;endl;&#125;</span></span><br><span class="line">        <span class="keyword">double</span> maxS=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n+<span class="number">1</span>; j++) &#123;</span><br><span class="line">                Vector e1=pots[i+<span class="number">1</span>][j]-pots[i][j],e2=pots[i][j+<span class="number">1</span>]-pots[i][j],em=pots[i+<span class="number">1</span>][j+<span class="number">1</span>]-pots[i][j];</span><br><span class="line">                <span class="keyword">double</span> S=<span class="number">0.5</span>*(<span class="built_in">fabs</span>(e1*em)+<span class="built_in">fabs</span>(e2*em));</span><br><span class="line">                <span class="keyword">if</span> (S&gt;maxS) maxS=S;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>,maxS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>(Unresolved) Tunnel Warfare</title>
    <url>/2020/05/14/(Unresolved)%20Tunnel%20Warfare/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1540" target="_blank" rel="noopener">HDUOJ 1540</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>During the War of Resistance Against Japan, tunnel warfare was carried out extensively in the vast areas of north China Plain. Generally speaking, villages connected by tunnels lay in a line. Except the two at the ends, every village was directly connected with two neighboring ones.</p>
<p>Frequently the invaders launched attack on some of the villages and destroyed the parts of tunnels in them. The Eighth Route Army commanders requested the latest connection state of the tunnels and villages. If some villages are severely isolated, restoration of connection must be done immediately!</p>
<h2><span id="input">Input</span></h2><p>The first line of the input contains two positive integers n and m (n, m ≤ 50,000) indicating the number of villages and events. Each of the next m lines describes an event.</p>
<p>There are three different events described in different format shown below:</p>
<p>D x: The x-th village was destroyed.</p>
<p>Q x: The Army commands requested the number of villages that x-th village was directly or indirectly connected with including itself.</p>
<p>R: The village destroyed last was rebuilt.</p>
<h2><span id="output">Output</span></h2><p>Output the answer to each of the Army commanders’ request in order on a separate line.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 9</span><br><span class="line">D 3</span><br><span class="line">D 6</span><br><span class="line">D 5</span><br><span class="line">Q 4</span><br><span class="line">Q 5</span><br><span class="line">R</span><br><span class="line">Q 4</span><br><span class="line">R</span><br><span class="line">Q 4</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1</span>&lt;&lt;<span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,dat[<span class="number">2</span>*MAX_N<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">int</span> all=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> N,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n_)</span></span>&#123;</span><br><span class="line">    n=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n&lt;n_) n*=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++) dat[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    k+=n<span class="number">-1</span>;</span><br><span class="line">    dat[k]=a;</span><br><span class="line">    <span class="keyword">while</span> (k&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        k=(k<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (dat[k*<span class="number">2</span>+<span class="number">1</span>]!=<span class="number">0</span>&amp;&amp;dat[k*<span class="number">2</span>+<span class="number">2</span>]!=<span class="number">0</span>) &#123;</span><br><span class="line">            dat[k]=dat[k*<span class="number">2</span>+<span class="number">1</span>]+dat[k*<span class="number">2</span>+<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> dat[k]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//bool left=a&lt;(r-l)/2;</span></span><br><span class="line">    <span class="keyword">if</span> (dat[k]==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a&lt;(r-l)/<span class="number">2</span>) &#123;    <span class="comment">//目标在左子树</span></span><br><span class="line">            <span class="keyword">return</span> query(a,k*<span class="number">2</span>+<span class="number">1</span>,l,(l+r)/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> query(a,k*<span class="number">2</span>+<span class="number">2</span>,(l+r)/<span class="number">2</span>,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dat[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;m;</span><br><span class="line">    init(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        update(i,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len=n;all=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (len&gt;=<span class="number">1</span>) &#123;</span><br><span class="line">        len/=<span class="number">2</span>;</span><br><span class="line">        all+=len;</span><br><span class="line">    &#125;</span><br><span class="line">    all+=N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;all; i++) <span class="built_in">cout</span>&lt;&lt;dat[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;destroy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> cmd;<span class="built_in">cin</span>&gt;&gt;cmd;</span><br><span class="line">        <span class="keyword">if</span> (cmd==<span class="string">'D'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            x--;</span><br><span class="line">            update(x,<span class="number">0</span>);</span><br><span class="line">            destroy.push(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmd==<span class="string">'Q'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmd==<span class="string">'R'</span>&amp;&amp;!destroy.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x=destroy.top();</span><br><span class="line">            destroy.pop();</span><br><span class="line">            update(x,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"ERROR"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;all; i++) <span class="built_in">cout</span>&lt;&lt;dat[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>线段树</tag>
        <tag>区间合并</tag>
      </tags>
  </entry>
  <entry>
    <title>(Unresolved) 最短路径问题</title>
    <url>/2020/05/02/(Unresolved)%20%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=3790" target="_blank" rel="noopener">HDUOJ 3790</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>给你n个点，m条无向边，每条边都有长度d和花费p，给你起点s终点t，要求输出起点到终点的最短距离及其花费，如果最短距离有多条路线，则输出花费最少的。</p>
<h2><span id="input">Input</span></h2><p>输入n,m，点的编号是1~n,然后是m行，每行4个数 a,b,d,p，表示a和b之间有一条边，且其长度为d，花费为p。最后一行是两个数 s,t;起点s，终点。n和m为0时输入结束。<br>(1&lt;n&lt;=1000, 0&lt;m&lt;100000, s != t)</p>
<h2><span id="output">Output</span></h2><p>输出 一行有两个数， 最短距离及其花费。</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 2</span><br><span class="line">1 2 5 6</span><br><span class="line">2 3 4 5</span><br><span class="line">1 3</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 11</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-unresolved">My Solution (Unresolved)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">99999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> dis;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">    edge(<span class="keyword">int</span> t,<span class="keyword">int</span> d,<span class="keyword">int</span> c):to(t),dis(d),cost(c)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dis[MAX_N],cost[MAX_N];</span><br><span class="line"><span class="keyword">int</span> n,m,start,target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> s,t,d,c;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t&gt;&gt;d&gt;&gt;c;</span><br><span class="line">            G[s<span class="number">-1</span>].push_back(edge(t<span class="number">-1</span>,d,c));</span><br><span class="line">            G[t<span class="number">-1</span>].push_back(edge(s<span class="number">-1</span>,d,c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            dis[i]=cost[i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;start&gt;&gt;target;</span><br><span class="line">        start--;target--;</span><br><span class="line">        dis[start]=cost[start]=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">        q.push(start);</span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> p=q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;G[p].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dis[G[p][i].to]&gt;dis[p]+G[p][i].dis||(dis[G[p][i].to]==dis[p]+G[p][i].dis&amp;&amp;cost[G[p][i].to]&gt;cost[p]+G[p][i].cost)) &#123;</span><br><span class="line">                    dis[G[p][i].to]=dis[p]+G[p][i].dis;</span><br><span class="line">                    cost[G[p][i].to]=cost[p]+G[p][i].cost;</span><br><span class="line">                    q.push(G[p][i].to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for(int i=0;i&lt;n;i++)cout&lt;&lt;dis[i]&lt;&lt;" "&lt;&lt;cost[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dis[target]&lt;&lt;<span class="string">" "</span>&lt;&lt;cost[target]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>图</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title>A + B Problem II</title>
    <url>/2020/04/25/A%20+%20B%20Problem%20II/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1002" target="_blank" rel="noopener">HDUOJ 1002</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.</p>
<h2><span id="input">Input</span></h2><p>The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.</p>
<h2><span id="output">Output</span></h2><p>For each test case, you should output two lines. The first line is “Case #:”, # means the number of the test case. The second line is the an equation “A + B = Sum”, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">112233445566778899 998877665544332211</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">1 + 2 &#x3D; 3</span><br><span class="line"></span><br><span class="line">Case 2:</span><br><span class="line">112233445566778899 + 998877665544332211 &#x3D; 1111111111111111110</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;<span class="built_in">print</span>;</span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">while</span> (a.at(<span class="number">0</span>)==<span class="string">'0'</span>&amp;&amp;a.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            a.erase(a.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (b.at(<span class="number">0</span>)==<span class="string">'0'</span>&amp;&amp;b.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            b.erase(b.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> oa=a,ob=b;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="built_in">size</span>()&lt;b.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="built_in">string</span> temp=a;</span><br><span class="line">            a=b;</span><br><span class="line">            b=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> on=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">string</span> res=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> (a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> aL=a.at(a.<span class="built_in">size</span>()<span class="number">-1</span>)-<span class="string">'0'</span>,bL=<span class="number">0</span>;</span><br><span class="line">            a.erase(a.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">if</span> (b.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                bL=b.at(b.<span class="built_in">size</span>()<span class="number">-1</span>)-<span class="string">'0'</span>;</span><br><span class="line">                b.erase(b.<span class="built_in">end</span>()<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tempSum=aL+bL;</span><br><span class="line">            <span class="keyword">if</span> (on) &#123;</span><br><span class="line">                tempSum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tempSum&gt;=<span class="number">10</span>) &#123;</span><br><span class="line">                on=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> on=<span class="literal">false</span>;</span><br><span class="line">            res=to_string(tempSum%<span class="number">10</span>)+res;</span><br><span class="line">            <span class="keyword">if</span> (!a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                res=to_string(tempSum/<span class="number">10</span>)+res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (res.at(<span class="number">0</span>)==<span class="string">'0'</span>&amp;&amp;res.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            res.erase(res.<span class="built_in">begin</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        res=<span class="string">"Case "</span>+to_string(i)+<span class="string">":\n"</span> + oa+<span class="string">" + "</span>+ob+<span class="string">" = "</span>+res+<span class="string">"\n"</span>;</span><br><span class="line">        <span class="built_in">print</span>.push_back(res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">print</span>.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">print</span>.at(i);</span><br><span class="line">        <span class="keyword">if</span> (i!=<span class="built_in">print</span>.<span class="built_in">size</span>()<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Bone Collector</title>
    <url>/2020/04/25/Bone%20Collector/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2602" target="_blank" rel="noopener">HDUOJ 2602</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>Many years ago , in Teddy’s hometown there was a man who was called “Bone Collector”. This man like to collect varies of bones , such as dog’s , cow’s , also he went to the grave …<br>The bone collector had a big bag with a volume of V ,and along his trip of collecting there are a lot of bones , obviously , different bone has different value and different volume, now given the each bone’s value along his trip , can you calculate out the maximum of the total value the bone collector can get ?</p>
<img src="http://acm.hdu.edu.cn/data/images/C154-1003-1.jpg" alt="img" style="zoom:50%;">

<h2><span id="input">Input</span></h2><p>The first line contain a integer T , the number of cases.<br>Followed by T cases , each case three lines , the first line contain two integer N , V, (N &lt;= 1000 , V &lt;= 1000 )representing the number of bones and the volume of his bag. And the second line contain N integers representing the value of each bone. The third line contain N integers representing the volume of each bone.</p>
<h2><span id="output">Output</span></h2><p>One integer per line representing the maximum of the total value (this number will be less than 231).</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">5 10</span><br><span class="line">1 2 3 4 5</span><br><span class="line">5 4 3 2 1</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,V;</span><br><span class="line"><span class="keyword">int</span> value[<span class="number">1000</span>],volume[<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;V;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">cin</span>&gt;&gt;value[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) <span class="built_in">cin</span>&gt;&gt;volume[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j&lt;volume[i]) &#123;</span><br><span class="line">                    DP[i+<span class="number">1</span>][j]=DP[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    DP[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(DP[i][j],DP[i][j-volume[i]]+value[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;DP[N][V]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Expedition</title>
    <url>/2020/05/02/Expedition/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=2431" target="_blank" rel="noopener">POJ 2431</a></center></p>

<h2><span id="description">Description</span></h2><p>A group of cows grabbed a truck and ventured on an expedition deep into the jungle. Being rather poor drivers, the cows unfortunately managed to run over a rock and puncture the truck’s fuel tank. The truck now leaks one unit of fuel every unit of distance it travels. </p>
<p>To repair the truck, the cows need to drive to the nearest town (no more than 1,000,000 units distant) down a long, winding road. On this road, between the town and the current location of the truck, there are N (1 &lt;= N &lt;= 10,000) fuel stops where the cows can stop to acquire additional fuel (1..100 units at each stop). </p>
<p>The jungle is a dangerous place for humans and is especially dangerous for cows. Therefore, the cows want to make the minimum possible number of stops for fuel on the way to the town. Fortunately, the capacity of the fuel tank on their truck is so large that there is effectively no limit to the amount of fuel it can hold. The truck is currently L units away from the town and has P units of fuel (1 &lt;= P &lt;= 1,000,000). </p>
<p>Determine the minimum number of stops needed to reach the town, or if the cows cannot reach the town at all. </p>
<h2><span id="input">Input</span></h2><p>* Line 1: A single integer, N </p>
<p>* Lines 2..N+1: Each line contains two space-separated integers describing a fuel stop: The first integer is the distance from the town to the stop; the second is the amount of fuel available at that stop. </p>
<p>* Line N+2: Two space-separated integers, L and P</p>
<h2><span id="output">Output</span></h2><p>* Line 1: A single integer giving the minimum number of fuel stops necessary to reach the town. If it is not possible to reach the town, output -1.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">4 4</span><br><span class="line">5 2</span><br><span class="line">11 5</span><br><span class="line">15 10</span><br><span class="line">25 10</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt;powerRights;	<span class="comment">//经过加油站视作可以加油的权利</span></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;stops;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">comp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;a,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first&lt;b.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,L,P;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l,p;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;p;</span><br><span class="line">        stops.push_back(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(l,p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;L&gt;&gt;P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        stops.at(i).first=L-stops.at(i).first;</span><br><span class="line">    &#125;</span><br><span class="line">    stops.push_back(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(L,<span class="number">0</span>));</span><br><span class="line">    sort(stops.<span class="built_in">begin</span>(),stops.<span class="built_in">end</span>(),comp);</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (P&gt;=stops.at(i).first) &#123;</span><br><span class="line">                powerRights.push(stops.at(i).second);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!powerRights.empty())&#123;</span><br><span class="line">                P+=powerRights.top();</span><br><span class="line">                powerRights.pop();</span><br><span class="line">                res++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                res=<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res==<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Cable master</title>
    <url>/2020/04/25/Cable%20master/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=1064" target="_blank" rel="noopener">POJ 1064</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a “star” topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.<br>To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.<br>The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter,and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.<br>You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces.</p>
<h2><span id="input">Input</span></h2><p>The first line of the input file contains two integer numb ers N and K, separated by a space. N (1 = N = 10000) is the number of cables in the stock, and K (1 = K = 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 meter and at most 100 kilometers in length. All lengths in the input file are written with a centimeter precision, with exactly two digits after a decimal point.</p>
<h2><span id="output">Output</span></h2><p>Write to the output file the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.<br>If it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output file must contain the single number “0.00” (without quotes).</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 11</span><br><span class="line">8.02</span><br><span class="line">7.43</span><br><span class="line">4.57</span><br><span class="line">5.39</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.00</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line"><span class="keyword">double</span> len[<span class="number">10000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numCable</span><span class="params">(<span class="keyword">double</span> dlen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        num+=(<span class="keyword">int</span>)(len[i]/dlen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">double</span> <span class="built_in">max</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;len[i];</span><br><span class="line">        <span class="built_in">max</span>+=len[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">max</span>/=k;</span><br><span class="line">    <span class="keyword">double</span> left=<span class="number">0</span>,right=<span class="built_in">max</span>;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">double</span> mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (numCable(mid)&lt;k) &#123;</span><br><span class="line">            right=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            left=mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res=mid*<span class="number">100</span>;</span><br><span class="line">    mid =res*<span class="number">0.01</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;mid&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title>Inversion</title>
    <url>/2020/05/12/Inversion/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=4911" target="_blank" rel="noopener">HDUOJ 4911</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>bobo has a sequence a1,a2,…,an. He is allowed to swap two <strong>adjacent</strong> numbers for no more than k times.</p>
<p>Find the minimum number of inversions after his swaps.</p>
<p>Note: The number of inversions is the number of pair (i,j) where 1≤i&lt;j≤n and ai&gt;aj.</p>
<h2><span id="input">Input</span></h2><p>The input consists of several tests. For each tests:</p>
<p>The first line contains 2 integers n,k (1≤n≤105,0≤k≤109). The second line contains n integers a1,a2,…,an (0≤ai≤109).</p>
<h2><span id="output">Output</span></h2><p>For each tests:</p>
<p>A single integer denotes the minimum number of inversions.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">2 2 1</span><br><span class="line">3 0</span><br><span class="line">2 2 1</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">bit</span>[MAX_N+<span class="number">1</span>],n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i&gt;<span class="number">0</span>) &#123;</span><br><span class="line">        s+=<span class="built_in">bit</span>[i];</span><br><span class="line">        i=i&amp;(i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i&lt;=n)&#123;</span><br><span class="line">        <span class="built_in">bit</span>[i]+=x;</span><br><span class="line">        i+=i&amp;-i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[MAX_N],b[MAX_N];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">            a[i]=b[i];</span><br><span class="line">            <span class="built_in">bit</span>[i+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b,b+n);</span><br><span class="line">        <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            mp[b[i]]=i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            a[i]=mp[a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">            res+=j-sum(a[j]);</span><br><span class="line">            add(a[j],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(res-k&gt;=<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;res-k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>树状数组</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title>Fence Repair</title>
    <url>/2020/05/12/Fence%20Repair/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=3253" target="_blank" rel="noopener">POJ 3253</a></center></p>

<h2><span id="description">Description</span></h2><p>Farmer John wants to repair a small length of the fence around the pasture. He measures the fence and finds that he needs <em>N</em>(1 ≤ <em>N</em> ≤ 20,000) planks of wood, each having some integer length <em>Li</em> (1 ≤ <em>Li</em> ≤ 50,000) units. He then purchases a single long board just long enough to saw into the <em>N</em> planks (i.e., whose length is the sum of the lengths <em>Li</em>). FJ is ignoring the “kerf”, the extra length lost to sawdust when a sawcut is made; you should ignore it, too.</p>
<p>FJ sadly realizes that he doesn’t own a saw with which to cut the wood, so he mosies over to Farmer Don’s Farm with this long board and politely asks if he may borrow a saw.</p>
<p>Farmer Don, a closet capitalist, doesn’t lend FJ a saw but instead offers to charge Farmer John for each of the <em>N</em>-1 cuts in the plank. The charge to cut a piece of wood is exactly equal to its length. Cutting a plank of length 21 costs 21 cents.</p>
<p>Farmer Don then lets Farmer John decide the order and locations to cut the plank. Help Farmer John determine the minimum amount of money he can spend to create the <em>N</em> planks. FJ knows that he can cut the board in various different orders which will result in different charges since the resulting intermediate planks are of different lengths.</p>
<h2><span id="input">Input</span></h2><p>Line 1: One integer <em>N</em>, the number of planks<br>Lines 2..<em>N</em>+1: Each line contains a single integer describing the length of a needed plank</p>
<h2><span id="output">Output</span></h2><p>Line 1: One integer: the minimum amount of money he must spend to make <em>N</em>-1 cuts</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">8</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">34</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    priority_queue &lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt; que;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> l;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;l;</span><br><span class="line">        que.push(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(que.<span class="built_in">size</span>()&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> l1=que.top();que.pop();</span><br><span class="line">        <span class="keyword">int</span> l2=que.top();que.pop();</span><br><span class="line">        ans+=l1+l2;</span><br><span class="line">        que.push(l1+l2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>优先队列</tag>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Pearls</title>
    <url>/2020/05/16/Pearls/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=1260" target="_blank" rel="noopener">POJ 1260</a></center></p>

<h2><span id="description">Description</span></h2><p>In Pearlania everybody is fond of pearls. One company, called The Royal Pearl, produces a lot of jewelry with pearls in it. The Royal Pearl has its name because it delivers to the royal family of Pearlania. But it also produces bracelets and necklaces for ordinary people. Of course the quality of the pearls for these people is much lower then the quality of pearls for the royal family.In Pearlania pearls are separated into 100 different quality classes. A quality class is identified by the price for one single pearl in that quality class. This price is unique for that quality class and the price is always higher then the price for a pearl in a lower quality class.<br>Every month the stock manager of The Royal Pearl prepares a list with the number of pearls needed in each quality class. The pearls are bought on the local pearl market. Each quality class has its own price per pearl, but for every complete deal in a certain quality class one has to pay an extra amount of money equal to ten pearls in that class. This is to prevent tourists from buying just one pearl.<br>Also The Royal Pearl is suffering from the slow-down of the global economy. Therefore the company needs to be more efficient. The CFO (chief financial officer) has discovered that he can sometimes save money by buying pearls in a higher quality class than is actually needed.No customer will blame The Royal Pearl for putting better pearls in the bracelets, as long as the<br>prices remain the same.<br>For example 5 pearls are needed in the 10 Euro category and 100 pearls are needed in the 20 Euro category. That will normally cost: (5+10)<em>10+(100+10)</em>20 = 2350 Euro.Buying all 105 pearls in the 20 Euro category only costs: (5+100+10)*20 = 2300 Euro.<br>The problem is that it requires a lot of computing work before the CFO knows how many pearls can best be bought in a higher quality class. You are asked to help The Royal Pearl with a computer program. </p>
<p>Given a list with the number of pearls and the price per pearl in different quality classes, give the lowest possible price needed to buy everything on the list. Pearls can be bought in the requested,or in a higher quality class, but not in a lower one. </p>
<h2><span id="input">Input</span></h2><p>The first line of the input contains the number of test cases. Each test case starts with a line containing the number of categories c (1&lt;=c&lt;=100). Then, c lines follow, each with two numbers ai and pi. The first of these numbers is the number of pearls ai needed in a class (1 &lt;= ai &lt;= 1000).<br>The second number is the price per pearl pi in that class (1 &lt;= pi &lt;= 1000). The qualities of the classes (and so the prices) are given in ascending order. All numbers in the input are integers. </p>
<h2><span id="output">Output</span></h2><p>For each test case a single line containing a single number: the lowest possible price needed to buy everything on the list. </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">100 1</span><br><span class="line">100 2</span><br><span class="line">3</span><br><span class="line">1 10</span><br><span class="line">1 11</span><br><span class="line">100 12</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">330</span><br><span class="line">1344</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">99999999</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> num[MAX_N],pri[MAX_N],total[MAX_N];</span><br><span class="line"><span class="keyword">int</span> DP[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,num+i,pri+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)total[<span class="number">0</span>]=num[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>)total[i]=num[i]+total[i<span class="number">-1</span>];</span><br><span class="line">            DP[i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;N; i++) cout&lt;&lt;total[i]&lt;&lt;" ";</span></span><br><span class="line">        DP[<span class="number">0</span>]=pri[<span class="number">0</span>]*(num[<span class="number">0</span>]+<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;N; i++) &#123;</span><br><span class="line">            DP[i]=<span class="built_in">min</span>(DP[i],(total[i]+<span class="number">10</span>)*pri[i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;i; j++) &#123;</span><br><span class="line">                DP[i]=<span class="built_in">min</span>(DP[i],DP[j]+(total[i]-total[j]+<span class="number">10</span>)*pri[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            DP[i]=<span class="built_in">min</span>(DP[i],DP[i<span class="number">-1</span>]+pri[i]*(num[i]+<span class="number">10</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for (int i=0; i&lt;N; i++) cout&lt;&lt;DP[i]&lt;&lt;" ";cout&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;DP[N<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Piggy-Bank</title>
    <url>/2020/04/26/Piggy-Bank/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1114" target="_blank" rel="noopener">HDUOJ 1114</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid. </p>
<p>But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs! </p>
<h2><span id="input">Input</span></h2><p>The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 &lt;= E &lt;= F &lt;= 10000. On the second line of each test case, there is an integer number N (1 &lt;= N &lt;= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 &lt;= P &lt;= 50000, 1 &lt;= W &lt;=10000). P is the value of the coin in monetary units, W is it’s weight in grams. </p>
<h2><span id="output">Output</span></h2><p>Print exactly one line of output for each test case. The line must contain the sentence “The minimum amount of money in the piggy-bank is X.” where X is the minimum amount of money that can be achieved using coins with the given total weight. If the weight cannot be reached exactly, print a line “This is impossible.”. </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">10 110</span><br><span class="line">2</span><br><span class="line">1 1</span><br><span class="line">30 50</span><br><span class="line">10 110</span><br><span class="line">2</span><br><span class="line">1 1</span><br><span class="line">50 30</span><br><span class="line">1 6</span><br><span class="line">2</span><br><span class="line">10 3</span><br><span class="line">20 4</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The minimum amount of money in the piggy-bank is 60.</span><br><span class="line">The minimum amount of money in the piggy-bank is 100.</span><br><span class="line">This is impossible.</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">500</span>*<span class="number">50000</span>;</span><br><span class="line"><span class="keyword">int</span> W,N;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">500</span>],w[<span class="number">500</span>];</span><br><span class="line"><span class="keyword">int</span> DP[<span class="number">10000</span>+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> filledPig,emptyPig;<span class="built_in">cin</span>&gt;&gt;emptyPig&gt;&gt;filledPig&gt;&gt;N;</span><br><span class="line">        W=filledPig-emptyPig;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;p[i]&gt;&gt;w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=W; i++) &#123;</span><br><span class="line">            DP[i]=INF;</span><br><span class="line">        &#125;</span><br><span class="line">        DP[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=w[i]; j&lt;=W; j++) &#123;</span><br><span class="line">                DP[j]=<span class="built_in">min</span>(DP[j],DP[j-w[i]]+p[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DP[W]!=INF) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"The minimum amount of money in the piggy-bank is "</span>&lt;&lt;DP[W]&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is impossible."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Pipe</title>
    <url>/2020/05/16/Pipe/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=1039" target="_blank" rel="noopener">POJ 1039</a></center></p>

<h2><span id="description">Description</span></h2><p>The GX Light Pipeline Company started to prepare bent pipes for the new transgalactic light pipeline. During the design phase of the new pipe shape the company ran into the problem of determining how far the light can reach inside each component of the pipe. Note that the material which the pipe is made from is not transparent and not light reflecting. </p>
<img src="http://poj.org/images/1039/pipe.gif">

<p>Each pipe component consists of many straight pipes connected tightly together. For the programming purposes, the company developed the description of each component as a sequence of points [x1; y1], [x2; y2], . . ., [xn; yn], where x1 &lt; x2 &lt; . . . xn . These are the upper points of the pipe contour. The bottom points of the pipe contour consist of points with y-coordinate decreased by 1. To each upper point [xi; yi] there is a corresponding bottom point [xi; (yi)-1] (see picture above). The company wants to find, for each pipe component, the point with maximal x-coordinate that the light will reach. The light is emitted by a segment source with endpoints [x1; (y1)-1] and [x1; y1] (endpoints are emitting light too). Assume that the light is not bent at the pipe bent points and the bent points do not stop the light beam. </p>
<h2><span id="input">Input</span></h2><p>The input file contains several blocks each describing one pipe component. Each block starts with the number of bent points 2 &lt;= n &lt;= 20 on separate line. Each of the next n lines contains a pair of real values xi, yi separated by space. The last block is denoted with n = 0. </p>
<h2><span id="output">Output</span></h2><p>The output file contains lines corresponding to blocks in input file. To each block in the input file there is one line in the output file. Each such line contains either a real value, written with precision of two decimal places, or the message Through all the pipe.. The real value is the desired maximal x-coordinate of the point where the light can reach from the source for corresponding pipe component. If this value equals to xn, then the message Through all the pipe. will appear in the output file. </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">0 1</span><br><span class="line">2 2</span><br><span class="line">4 1</span><br><span class="line">6 4</span><br><span class="line">6</span><br><span class="line">0 1</span><br><span class="line">2 -0.6</span><br><span class="line">5 -4.45</span><br><span class="line">7 -5.57</span><br><span class="line">12 -10.8</span><br><span class="line">17 -16.55</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4.67</span><br><span class="line">Through all the pipe.</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point(<span class="keyword">double</span> _x,<span class="keyword">double</span> _y):x(_x),y(_y)&#123;&#125;</span><br><span class="line">    Point()=<span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(<span class="keyword">const</span> Vector&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(v.x*v.x+v.y*v.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span>-(<span class="keyword">const</span> Point&amp; a,<span class="keyword">const</span> Point&amp; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Vector)&#123;a.x-b.x,a.y-b.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point <span class="keyword">operator</span>+(<span class="keyword">const</span> Point&amp; p,<span class="keyword">const</span> Vector&amp; v) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Point)&#123;p.x+v.x,p.y+v.y&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector <span class="keyword">operator</span> *(<span class="keyword">const</span> Vector&amp; a,<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) &#123;</span><br><span class="line">    <span class="keyword">return</span> (Vector)&#123;a.x*k,a.y*k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span> ^(<span class="keyword">const</span> Vector&amp; a,<span class="keyword">const</span> Vector&amp; b) &#123;    <span class="comment">//dot</span></span><br><span class="line">    <span class="keyword">return</span> a.x*b.x+a.y*b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span> *(<span class="keyword">const</span> Vector&amp; a,<span class="keyword">const</span> Vector&amp; b) &#123;    <span class="comment">//cha</span></span><br><span class="line">    <span class="keyword">return</span> a.x*b.y-a.y*b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Line</span>&#123;</span></span><br><span class="line">    Point p1,p2;</span><br><span class="line">    Line(Point _p1,Point _p2):p1(_p1),p2(_p2)&#123;&#125;</span><br><span class="line">    Line()=<span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segCrossLine</span><span class="params">(Line l,Line s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sgn((l.p1-s.p2)*(s.p1-s.p2))*sgn((l.p2-s.p2)*(s.p1-s.p2))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>,Point&gt; <span class="keyword">operator</span>&amp;(<span class="keyword">const</span> Line &amp;l1,<span class="keyword">const</span> Line &amp;l2)&#123;</span><br><span class="line">    Point res=l1.p1;</span><br><span class="line">    <span class="keyword">if</span>(sgn((l1.p1-l1.p2)*(l2.p1-l2.p2))==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (sgn((l1.p1-l2.p2)*(l2.p1-l2.p2))==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> make_pair(<span class="number">0</span>,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> make_pair(<span class="number">1</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> t=((l1.p1-l2.p2)*(l2.p1-l2.p2))/((l1.p1-l1.p2)*(l2.p1-l2.p2));</span><br><span class="line">    res.x+=t*(l1.p2.x-l1.p1.x);</span><br><span class="line">    res.y+=t*(l1.p2.y-l1.p1.y);</span><br><span class="line">    <span class="keyword">return</span> make_pair(<span class="number">2</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        Point up[<span class="number">20</span>],down[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;(up[i].x),&amp;(up[i].y));</span><br><span class="line">            <span class="comment">//cin&gt;&gt;up[i].x&gt;&gt;up[i].y;</span></span><br><span class="line">            down[i].x=up[i].x;</span><br><span class="line">            down[i].y=up[i].y<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> res=up[<span class="number">0</span>].x;</span><br><span class="line">        <span class="keyword">bool</span> through=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="function">Line <span class="title">line</span><span class="params">(up[i],down[j])</span></span>;</span><br><span class="line">                Point <span class="built_in">end</span>;</span><br><span class="line">                <span class="keyword">if</span> (!segCrossLine(Line(up[<span class="number">0</span>],down[<span class="number">0</span>]),<span class="built_in">line</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>; k&lt;n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (segCrossLine(Line(up[k],down[k]),<span class="built_in">line</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (k==n<span class="number">-1</span>) &#123;</span><br><span class="line">                            through=<span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">double</span> pr=up[<span class="number">0</span>].x;</span><br><span class="line">                        <span class="keyword">if</span> (segCrossLine(Line(up[k],up[k<span class="number">-1</span>]),<span class="built_in">line</span>)) &#123;</span><br><span class="line">                            pr=<span class="built_in">max</span>(pr,(Line(up[k],up[k<span class="number">-1</span>])&amp;<span class="built_in">line</span>).second.x);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (segCrossLine(Line(down[k],down[k<span class="number">-1</span>]),<span class="built_in">line</span>)) &#123;</span><br><span class="line">                            pr=<span class="built_in">max</span>(pr,(Line(down[k],down[k<span class="number">-1</span>])&amp;<span class="built_in">line</span>).second.x);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (pr&gt;res) &#123;</span><br><span class="line">                            res=pr;</span><br><span class="line">                            <span class="comment">//cout&lt;&lt;"updated "&lt;&lt;res&lt;&lt;" at "&lt;&lt;i&lt;&lt;j&lt;&lt;k&lt;&lt;endl;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (through) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (through) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (through) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Through all the pipe."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>Robberies</title>
    <url>/2020/04/27/Robberies/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2955" target="_blank" rel="noopener">HDUOJ 2955</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>The aspiring Roy the Robber has seen a lot of American movies, and knows that the bad guys usually gets caught in the end, often because they become too greedy. He has decided to work in the lucrative business of bank robbery only for a short while, before retiring to a comfortable job at a university.</p>
<img src="http://acm.hdu.edu.cn/data/images/con211-1010-1.jpg" alt="img" style="zoom: 50%;">

<p>For a few months now, Roy has been assessing the security of various banks and the amount of cash they hold. He wants to make a calculated risk, and grab as much money as possible.<br>His mother, Ola, has decided upon a tolerable probability of getting caught. She feels that he is safe enough if the banks he robs together give a probability less than this.</p>
<h2><span id="input">Input</span></h2><p>The first line of input gives T, the number of cases. For each scenario, the first line of input gives a floating point number P, the probability Roy needs to be below, and an integer N, the number of banks he has plans for. Then follow N lines, where line j gives an integer Mj and a floating point number Pj .<br>Bank j contains Mj millions, and the probability of getting caught from robbing it is Pj .</p>
<h2><span id="output">Output</span></h2><p>For each test case, output a line with the maximum number of millions he can expect to get while the probability of getting caught is less than the limit set.</p>
<p>Notes and Constraints<br>0 &lt; T &lt;= 100<br>0.0 &lt;= P &lt;= 1.0<br>0 &lt; N &lt;= 100<br>0 &lt; Mj &lt;= 100<br>0.0 &lt;= Pj &lt;= 1.0<br>A bank goes bankrupt if it is robbed, and you may assume that all probabilities are independent as the police have very low funds.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">0.04 3</span><br><span class="line">1 0.02</span><br><span class="line">2 0.03</span><br><span class="line">3 0.05</span><br><span class="line">0.06 3</span><br><span class="line">2 0.03</span><br><span class="line">2 0.03</span><br><span class="line">3 0.05</span><br><span class="line">0.10 3</span><br><span class="line">1 0.03</span><br><span class="line">2 0.02</span><br><span class="line">3 0.05</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-wa">My Solution (WA)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> P,p[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> N,m[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">float</span> DP[<span class="number">100</span>*<span class="number">100</span>+<span class="number">1</span>];<span class="comment">//DP[j]表示在抢 j millons 美元时最大的逃脱概率；</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;P&gt;&gt;N;</span><br><span class="line">        <span class="keyword">int</span> maxM=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;m[i]&gt;&gt;p[i];</span><br><span class="line">            maxM+=m[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(DP, <span class="number">0</span>, <span class="keyword">sizeof</span>(DP));</span><br><span class="line">        DP[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=m[i]; j&lt;=maxM; j++) &#123;</span><br><span class="line">                DP[j]=<span class="built_in">max</span>(DP[j],DP[j-m[i]]*(<span class="number">1</span>-p[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res;</span><br><span class="line">        <span class="keyword">for</span> (res=maxM; res&gt;=<span class="number">0</span>; res--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (DP[res]&gt;=<span class="number">1</span>-P) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Surround the Trees</title>
    <url>/2020/05/17/Surround%20the%20Trees/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=1392" target="_blank" rel="noopener">HDUOJ 1392</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>There are a lot of trees in an area. A peasant wants to buy a rope to surround all these trees. So at first he must know the minimal required length of the rope. However, he does not know how to calculate it. Can you help him?<br>The diameter and length of the trees are omitted, which means a tree can be seen as a point. The thickness of the rope is also omitted which means a rope can be seen as a line.</p>
<p><img src="http://acm.hdu.edu.cn/data/images/1392-1.gif" alt="img"></p>
<p>There are no more than 100 trees.</p>
<h2><span id="input">Input</span></h2><p>The input contains one or more data sets. At first line of each input data set is number of trees in this data set, it is followed by series of coordinates of the trees. Each coordinate is a positive integer pair, and each integer is less than 32767. Each pair is separated by blank.</p>
<p>Zero at line for number of trees terminates the input for your program.</p>
<h2><span id="output">Output</span></h2><p>The minimal length of the rope. The precision should be 10^-2.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 </span><br><span class="line">12 7 </span><br><span class="line">24 9 </span><br><span class="line">30 5 </span><br><span class="line">41 9 </span><br><span class="line">80 7 </span><br><span class="line">50 87 </span><br><span class="line">22 9 </span><br><span class="line">45 1 </span><br><span class="line">50 7 </span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">243.06</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xx,yy;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Point a,Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.y==b.y)</span><br><span class="line">        <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross</span><span class="params">(Point a,Point b,Point c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x-a.x)*(c.y-a.y)-(c.x-a.x)*(b.y-a.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Point a,Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)*<span class="number">1.0</span>+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Point a,Point b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">atan2</span>(a.y-yy,a.x-xx)!=<span class="built_in">atan2</span>(b.y-yy,b.x-xx))</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">atan2</span>(a.y-yy,a.x-xx))&lt;(<span class="built_in">atan2</span>(b.y-yy,b.x-xx));</span><br><span class="line">    <span class="keyword">return</span> a.x&lt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        Point vex[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;t; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;vex[i].x,&amp;vex[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,<span class="number">0.00</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>,length(vex[<span class="number">0</span>],vex[<span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Point st[<span class="number">1000</span>];</span><br><span class="line">            sort(vex,vex+t,cmp1);</span><br><span class="line">            st[<span class="number">0</span>]=vex[<span class="number">0</span>];</span><br><span class="line">            xx=st[<span class="number">0</span>].x;</span><br><span class="line">            yy=st[<span class="number">0</span>].y;</span><br><span class="line">            sort(vex+<span class="number">1</span>,vex+t,cmp2);</span><br><span class="line">            st[<span class="number">1</span>]=vex[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> top=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;t; i++) &#123;</span><br><span class="line">                <span class="keyword">while</span>(i&gt;=<span class="number">1</span>&amp;&amp;cross(st[top<span class="number">-1</span>],st[top],vex[i])&lt;<span class="number">0</span>) top--;</span><br><span class="line">                st[++top]=vex[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> s=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=top; i++) s+=length(st[i<span class="number">-1</span>],st[i]);</span><br><span class="line">            s+=length(st[top],vex[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>计算几何</tag>
        <tag>凸包</tag>
      </tags>
  </entry>
  <entry>
    <title>Tree Recovery</title>
    <url>/2020/05/02/Tree%20Recovery/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://poj.org/problem?id=2255" target="_blank" rel="noopener">POJ 2255</a></center></p>

<h2><span id="description">Description</span></h2><p>Little Valentine liked playing with binary trees very much. Her favorite game was constructing randomly looking binary trees with capital letters in the nodes.<br>This is an example of one of her creations: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      D</span><br><span class="line"></span><br><span class="line">     &#x2F; \</span><br><span class="line"></span><br><span class="line">    &#x2F;   \</span><br><span class="line"></span><br><span class="line">   B     E</span><br><span class="line"></span><br><span class="line">  &#x2F; \     \</span><br><span class="line"></span><br><span class="line"> &#x2F;   \     \</span><br><span class="line"></span><br><span class="line">A     C     G</span><br><span class="line"></span><br><span class="line">           &#x2F;</span><br><span class="line"></span><br><span class="line">          &#x2F;</span><br><span class="line"></span><br><span class="line">         F</span><br></pre></td></tr></table></figure>


<p>To record her trees for future generations, she wrote down two strings for each tree: a preorder traversal (root, left subtree, right subtree) and an inorder traversal (left subtree, root, right subtree). For the tree drawn above the preorder traversal is DBACEGF and the inorder traversal is ABCDEFG.<br>She thought that such a pair of strings would give enough information to reconstruct the tree later (but she never tried it). </p>
<p>Now, years later, looking again at the strings, she realized that reconstructing the trees was indeed possible, but only because she never had used the same letter twice in the same tree.<br>However, doing the reconstruction by hand, soon turned out to be tedious.<br>So now she asks you to write a program that does the job for her! </p>
<h2><span id="input">Input</span></h2><p>The input will contain one or more test cases.<br>Each test case consists of one line containing two strings preord and inord, representing the preorder traversal and inorder traversal of a binary tree. Both strings consist of unique capital letters. (Thus they are not longer than 26 characters.)<br>Input is terminated by end of file. </p>
<h2><span id="output">Output</span></h2><p>For each test case, recover Valentine’s binary tree and print one line containing the tree’s postorder traversal (left subtree, right subtree, root). </p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DBACEGF ABCDEFG</span><br><span class="line">BCAD CBAD</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ACBFGED</span><br><span class="line">CDAB</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution-compile-error">My Solution (Compile Error)</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> preOrder,inOrder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bigger</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123; <span class="comment">//a&gt;b?</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inOrder.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (inOrder[i]==a) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (inOrder[i]==b) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    T m_value;</span><br><span class="line">    Node *m_left;</span><br><span class="line">    Node *m_right;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Node()&#123;</span><br><span class="line">        m_left=<span class="literal">NULL</span>;</span><br><span class="line">        m_right=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">T &amp;<span class="title">value</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> m_value;&#125;</span><br><span class="line">    <span class="function">Node *&amp;<span class="title">left</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> m_left;&#125;</span><br><span class="line">    <span class="function">Node *&amp;<span class="title">right</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> m_right;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span> &#123;</span></span><br><span class="line">    Node&lt;T&gt; m_root;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(Node&lt;T&gt; *nd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nd!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">            postOrder(nd-&gt;left());</span><br><span class="line">            postOrder(nd-&gt;right());</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;nd-&gt;value();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node&lt;T&gt; *<span class="title">root</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> &amp;m_root;&#125;</span><br><span class="line">    <span class="function">Node&lt;T&gt; *<span class="title">search</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">        Node&lt;T&gt; * nd=root();</span><br><span class="line">        <span class="keyword">while</span> (nd!=<span class="literal">NULL</span>&amp;&amp;nd-&gt;value()!=value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Bigger(nd-&gt;value(), value)) &#123;</span><br><span class="line">                nd=nd-&gt;left();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nd=nd-&gt;right();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Add</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">        Node&lt;T&gt; *father=root();</span><br><span class="line">        <span class="keyword">while</span> (father!=<span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Bigger(value,father-&gt;value())) &#123;</span><br><span class="line">                <span class="keyword">if</span> (father-&gt;right()==<span class="literal">NULL</span>) &#123;</span><br><span class="line">                    father-&gt;right()=<span class="keyword">new</span> Node&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">                    father-&gt;right()-&gt;value()=value;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                father=father-&gt;right();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (father-&gt;left()==<span class="literal">NULL</span>) &#123;</span><br><span class="line">                    father-&gt;left()=<span class="keyword">new</span> Node&lt;<span class="keyword">char</span>&gt;;</span><br><span class="line">                    father-&gt;left()-&gt;value()=value;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                father=father-&gt;left();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;preOrder&gt;&gt;inOrder) &#123;</span><br><span class="line">        BinaryTree&lt;<span class="keyword">char</span>&gt; BT;</span><br><span class="line">        BT.root()-&gt;value()=preOrder[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;preOrder.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> now=preOrder[i];</span><br><span class="line">            BT.Add(now);</span><br><span class="line">        &#125;</span><br><span class="line">        BT.postOrder(BT.root());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Wireless Network</title>
    <url>/2020/05/07/Wireless%20Network/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2236" target="_blank" rel="noopener">POJ 2236</a></center></p>

<h2><span id="description">Description</span></h2><p>An earthquake takes place in Southeast Asia. The ACM (Asia Cooperated Medical team) have set up a wireless network with the lap computers, but an unexpected aftershock attacked, all computers in the network were all broken. The computers are repaired one by one, and the network gradually began to work again. Because of the hardware restricts, each computer can only directly communicate with the computers that are not farther than d meters from it. But every computer can be regarded as the intermediary of the communication between two other computers, that is to say computer A and computer B can communicate if computer A and computer B can communicate directly or there is a computer C that can communicate with both A and B. </p>
<p>In the process of repairing the network, workers can take two kinds of operations at every moment, repairing a computer, or testing if two computers can communicate. Your job is to answer all the testing operations. </p>
<h2><span id="input">Input</span></h2><p>The first line contains two integers N and d (1 &lt;= N &lt;= 1001, 0 &lt;= d &lt;= 20000). Here N is the number of computers, which are numbered from 1 to N, and D is the maximum distance two computers can communicate directly. In the next N lines, each contains two integers xi, yi (0 &lt;= xi, yi &lt;= 10000), which is the coordinate of N computers. From the (N+1)-th line to the end of input, there are operations, which are carried out one by one. Each line contains an operation in one of following two formats:<br>\1. “O p” (1 &lt;= p &lt;= N), which means repairing computer p.<br>\2. “S p q” (1 &lt;= p, q &lt;= N), which means testing whether computer p and q can communicate. </p>
<p>The input will not exceed 300000 lines. </p>
<h2><span id="output">Output</span></h2><p>For each Testing operation, print “SUCCESS” if the two computers can communicate, or “FAIL” if not.</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 1</span><br><span class="line">0 1</span><br><span class="line">0 2</span><br><span class="line">0 3</span><br><span class="line">0 4</span><br><span class="line">O 1</span><br><span class="line">O 2</span><br><span class="line">O 4</span><br><span class="line">S 1 4</span><br><span class="line">O 3</span><br><span class="line">S 1 4</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FAIL</span><br><span class="line">SUCCESS</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N=<span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="keyword">int</span> par[MAX_N];</span><br><span class="line"><span class="keyword">int</span> ranker[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        par[i]=i;</span><br><span class="line">        ranker[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x]==x) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> par[x]=findroot(par[x]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    x=findroot(x);</span><br><span class="line">    y=findroot(y);</span><br><span class="line">    <span class="keyword">if</span> (x==y) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ranker[x]&lt;ranker[y]) &#123;</span><br><span class="line">            par[x]=y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            par[y]=x;</span><br><span class="line">            <span class="keyword">if</span> (ranker[x]==ranker[y]) &#123;</span><br><span class="line">                ranker[x]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> findroot(x)==findroot(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x[MAX_N],y[MAX_N];</span><br><span class="line"><span class="keyword">bool</span> ok[MAX_N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx=x[a]-x[b];</span><br><span class="line">    <span class="keyword">int</span> dy=y[a]-y[b];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>(dx*dx+dy*dy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,d;<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">        ok[i]=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;ch) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch==<span class="string">'O'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;<span class="built_in">cin</span>&gt;&gt;x;x--;</span><br><span class="line">            ok[x]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dist(x,i)&lt;=d&amp;&amp;ok[x]&amp;&amp;ok[i]) &#123;</span><br><span class="line">                    unite(x,i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch==<span class="string">'S'</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x,y;<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;x--;y--;</span><br><span class="line">            <span class="keyword">if</span> (same(x,y))&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"SUCCESS"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"FAIL"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇文章搞定 macOS 截图</title>
    <url>/2020/04/23/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E6%90%9E%E5%AE%9A%20macOS%20%E6%88%AA%E5%9B%BE/</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>版权声明：</strong> <em>本文所有内容均为 @EchoForger 的个人博客 <a href="https://www.wildptr.cn">WildPtr 野指针</a>的原创内容，转载请务必注明作者与原文链接，且不得篡改原文内容。</em></p>
</blockquote>
<p>截图是我们在日常办公中十分常用的操作之一，很多人在刚刚接触 macOS 的时候，对新系统的截图功能非常陌生，今天就让我们用一篇文章，解决在 macOS 上的截图需求。</p>
<h2><span id="普通系统截图">普通系统截图</span></h2><p>系统截图是最方便也最常用的截图方法，不需要安装任何插件，操作也非常简单，可以使用以下快捷键进行截图。</p>
<h3><span id="command-shift-3-截取整个屏幕"><strong><code>Command + Shift + 3</code> 截取整个屏幕</strong></span></h3><p>使用此快捷键会截取屏幕的所有内容，生成一张与屏幕像素尺寸相同的图片。屏幕像素尺寸可以在“关于本机”&gt;“显示器”中看到。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS05NDFmNzc0OWI5NTM3MGZkLnBuZw?x-oss-process=image/format,png" alt="查看屏幕像素尺寸" style="zoom:50%;">


<h3><span id="command-shift-4-截取部分屏幕"><strong><code>Command + Shift + 4</code> 截取部分屏幕</strong></span></h3><p>选取需要截图的区域后，按住鼠标的同时按下 <code>空格</code>，这时你能通过移动鼠标来移动整个已选择区域；按住鼠标的同时按下 <code>Shift</code> 键，这时你能通过横向或竖向移动鼠标来改变已选择区域的长或高；按住鼠标的同时按下 <code>Option</code> 键，这时你通过移动鼠标可以对称地改变截图区域。</p>
<p>按下<code>Command + Shift + 4 + 空格</code> 再点击某个窗口可以截取选中的窗口，点击桌面可以截取桌面壁纸。</p>
<p>截取窗口时，macOS 默认会给截图加上一层<strong>软阴影</strong>，个人认为这层软阴影还是挺好看的，如果你想去除，只需要在截图的时候按住 <code>Option</code> 即可。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS04YmE5ZTFiMzBkN2EyODZjLnBuZw?x-oss-process=image/format,png" alt="有阴影截图（左）和无阴影截图（右）"></p>
<p>也可以在终端执行一条命令永久去除软阴影：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool true&amp;&amp;killall SystemUIServer</span><br></pre></td></tr></table></figure>

<p>如果要把软阴影找回来，同样也只需要一条命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool false&amp;&amp;killall SystemUIServer</span><br></pre></td></tr></table></figure>

<p>如果你使用的是带触控栏的 MacBook Pro，则在按下 <code>Command + Shift + 4</code> 后可以在触控栏选择“截取整个屏幕”、“截取所选窗口”或“截取部分屏幕”，也可以对截图的储存位置进行修改。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1kMTc3ZDJlN2M3ZmFlZDQwLnBuZw?x-oss-process=image/format,png" alt="使用触控栏进行截图操作"></p>
<h3><span id="command-shift-5-打开截图工具栏"><strong><code>Command + Shift + 5</code> 打开截图工具栏</strong></span></h3><h3><span id="command-shift-6-截取触控栏"><strong><code>Command + Shift + 6</code> 截取触控栏</strong></span></h3><p>如果你在上述任意一套组合键中加上 <code>Control</code>，则截图会自动进入系统的剪切板记录，桌面不会再保存截图，此时你可以直接使用 <code>Command + V</code> 进行粘贴。</p>
<p>当你按下截图组合键后想停止截图操作，只要按 <code>Esc</code> 就能停止截图，此时不会保存任何图片文件。</p>
<p>当然，以上的快捷键都可以根据个人喜好进行修改。若要修改截图快捷键只需要进入“系统偏好设置”&gt;”键盘”&gt;“快捷键”&gt;“截图”进行修改即可。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS0yZTcwOTBmYTE0ZjJiNjdiLnBuZw?x-oss-process=image/format,png" alt="修改快捷键" style="zoom:50%;">


<h3><span id="系统自带的截屏app">系统自带的“截屏”app</span></h3><p>在 macOS 中有自在的截图 app“截屏”，它就藏在程序列表的“其他”文件夹中，打开“截屏”app 就相当于启动截图工具栏，与 <code>Command + Shift + 5</code> 效果相同。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS04YWY2NmI4NDIxNzgxYWZlLnBuZw?x-oss-process=image/format,png" alt="截屏"></p>
<h3><span id="截图缩略图">截图缩略图</span></h3><p>在使用系统截图截图完成后，便会在屏幕的右下角生成一个截图缩略图，我们可以点击它，对截图进行快速编辑。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1kZWEwZTgzZWVhMTA0MzJlLnBuZw?x-oss-process=image/format,png" alt="对截图进行快速编辑"></p>
<p>如果不想处理，可以将其向右轻扫。我们还可以拖动缩略图储存到不同的位置。不仅如此，还可以按住 <code>Control</code> 并点击或者右击缩略图，弹出菜单选项，选择不同的处理方式。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1hZmNlNzQ2OWFhMjkxOGZhLnBuZw?x-oss-process=image/format,png" alt="菜单选项" style="zoom:67%;">


<p>可以说，macOS 自带的截图功能已经非常强大，足以满足我们日常生活中的绝大多数需求，但接下来要说的截图工具，会让你的 Mac 截图更强大。</p>
<h2><span id="长截图">长截图</span></h2><p>说到 macOS 的长截图，在这里就不得不提 iShot 了。iShot 是一款非常优秀的截图软件，我们可以在 <a href="https://apps.apple.com/cn/app/ishot-%E6%88%AA%E5%9B%BE-%E9%95%BF%E6%88%AA%E5%9B%BE-%E8%B4%B4%E5%9B%BE-%E5%BD%95%E5%B1%8F%E5%B7%A5%E5%85%B7/id1485844094?mt=12" target="_blank" rel="noopener">Mac App Store 上免费下载</a>。安装完成后，屏幕右上角会出现一个小按钮，我们只需要点击它就可以使用各种截图功能。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS0yZWExZjU2NzI4NTQxZDYyLnBuZw?x-oss-process=image/format,png" alt="屏幕右上角会出现一个小按钮" style="zoom:50%;"></p>
<p>想要使用 iShot 的长截图功能，只需要点击截图（快捷键 <code>Option + A</code>），然后框选出要截图的窗口，点击下方的“长截图”按钮（或者直接使用快捷键 <code>S</code>）即可开始长截图。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1iZWQ0ODAyMDc1ZmM1M2RlLmdpZg" alt="使用 iShot 进行长截图.gif"></p>
<p>进行长截图时，缓慢的滑动页面，完成后点击下方的确认，一张精美的长截图便制作完成了。</p>
<h2><span id="截取动图">截取动图</span></h2><p>除了静态的截图，iShot 也是一款优秀的动图截取软件，可以轻松利用 iShot 制作精美动图，为你的文章增添色彩。</p>
<p>截取 gif 动图，只需要点击右上角的 iShot 小图标，点击“开始录屏”（快捷键 <code>Option + W</code>）并框选住要录制的区域。在下方的工具栏中可以选择画质，记得在选项中选择格式为“gif”，这样才会录制动图而不是视频哦。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1iMDdlZDAyZjJhMzgwYTJiLnBuZw?x-oss-process=image/format,png" alt="选择格式为 gif" style="zoom:50%;">


<p>当然这里 gif 不要选择过高的清晰度，因为这样会导致 gif 文件的体积非常大，以至于不适合在网络上传输。</p>
<h2><span id="小结">小结</span></h2><p>关于 macOS 的截图方法就介绍到这里，不得不说 macOS 的截图功能相对于隔壁的 Windows 真的是强大了不少，掌握了这些截图的方法，便可以很大程度上地提升工作和学习的效率 ，省去很多不必要的麻烦了。</p>
]]></content>
      <categories>
        <category>数字生活</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>截图</tag>
        <tag>技巧</tag>
        <tag>苹果</tag>
      </tags>
  </entry>
  <entry>
    <title>与 Apple Music 一同优雅地享受音乐</title>
    <url>/2020/04/22/%E4%B8%8E%20Apple%20Music%20%E4%B8%80%E5%90%8C%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BA%AB%E5%8F%97%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>版权声明：</strong> <em>本文所有内容均为 @EchoForger 的个人博客 <a href="https://www.wildptr.cn">WildPtr 野指针</a>的原创内容，转载请务必注明作者与原文链接，且不得篡改原文内容。</em></p>
</blockquote>
<p>还在使用网易云音乐、QQ音乐又或是其他音乐流媒体平台吗？相信在这个版权之战打得热火朝天的时代，我们往往需要同时使用多个音乐软件，甚至开通多项音乐服务，才能满足我们的听歌需求。为了听周杰伦得去QQ音乐充音乐包，为了听华晨宇得去网易云购买专辑，总之各大音乐平台都掌握着某些歌手的独家的版权。不仅如此，除了这些，你还得忍受各种各样的广告推送、音乐订阅号、音乐短视频……这些和音乐无关的东西渐渐让我们远离了音乐本身。</p>
<blockquote>
<p>你有多久没有认真地听一首歌了。</p>
</blockquote>
<p>而 Apple Music 却是一个优雅的存在，它是一个音乐软件，它也只是一个音乐软件；它让我们可以听歌，也仅仅可以听歌。很多人往往因为对过去 iTunes 难以操作的观点，对 Apple Music 的软件界面望而却步，抱怨苹果为什么会开发出这么难用的软件。其实不然，Apple Music 是我用过最好的音乐库管理软件，它在做到优雅简洁的同时又不乏强大的管理功能。接下来就让我们一起打造属于自己的音乐资料库。</p>
<h2><span id="建立云端音乐资料库">建立云端音乐资料库</span></h2><p>使用 Apple Music 的第一步就是打开其云端资料库。这里需要订阅 Apple Music 的音乐服务，在国内的资费是 10 元每个月，或者以学生优惠 5 元每个月的价格订阅即可，然后在各个设备上登陆你的 Apple ID，并在“设置”或者“偏好设置”中打w开“同步资料库”。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1lNzA5YzZiMzIzYWRhMGM0LnBuZw?x-oss-process=image/format,png" alt="打开其云端资料库"></p>
<h2><span id="添加音乐">添加音乐</span></h2><p>添加音乐的方式有很多种，你可以通过 Apple Music 在线音乐库或者从其他音乐软件添加音乐，接下来将逐一介绍。</p>
<h3><span id="通过-apple-music-在线音乐库添加音乐">通过 Apple Music 在线音乐库添加音乐</span></h3><p>当然这是最简单也最方便的音乐添加方式，只需要在 Apple Music 的在线音乐库中搜索然后添加即可。这样添加固然很好，所有的歌曲信息以及歌词、专辑封面等都会自动匹配好。关键是在 iOS 13 以及 macOS 10.15.4 及以后的 Apple Music 中还有非常炫酷的动态歌词，歌词根据音乐律动，不得不说苹果的动态歌词真的做的非常出色，也引来了其他音乐平台的模仿。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1jNzQ0OGQ3NWMzNzliM2ZiLlBORw?x-oss-process=image/format,png" alt="苹果的动态歌词"></p>
<h3><span id="通过其他音乐软件添加音乐">通过其他音乐软件添加音乐</span></h3><p>然而 Apple Music 对于喜欢华语音乐的人来说其曲库算不上丰富，很多中国的独立音乐人在 Apple Music 上都搜不到，甚至有些歌手的专辑收录不全（其实其他的流媒体音乐平台也有很多音乐没有版权），在这种情况下，我们便可以手动地从其他软件下载音乐文件，并添加到 Apple Music 资料库中。</p>
<p>不过由于我国很多音乐软件下载下来的音乐都是播放器独家的格式，没有办法在其他播放器中播放（例如网易云音乐的 .ncm 格式），要想获取 .mp3 格式的音乐文件，就得花钱购买专辑，把这些专辑购买下来也未尝不可，但我相信下面的两个网站可以帮到你。</p>
<blockquote>
<p>.ncm 格式在线转换为 .mp3 格式：<a href="http://ncm.worthsee.com" target="_blank" rel="noopener">http://ncm.worthsee.com</a></p>
<p>.qmc 格式在线转换为 .mp3 格式：<a href="http://convert.freelrc.com/QMC-to-MP3" target="_blank" rel="noopener">http://convert.freelrc.com/QMC-to-MP3</a></p>
</blockquote>
<p>得到 .mp3 格式的音乐文件后，只需要在 macOS 端的 Apple Music 上，将音乐文件拖到“歌曲列表”中，就会自动添加到云端音乐库中。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1iZWYwZjc0MDRhMzdmYzI0LnBuZw?x-oss-process=image/format,png" alt="更新云端资料库"></p>
<p>若没有添加成功，我们可以通过“文件”&gt;“资料库”&gt;“更新云端资料库”来进行同步。</p>
<p>同步的过程中，Apple Music 会将本地的音乐与 Apple Music 在线资料库中的音乐进行匹配（妙选），若没有匹配到相同的音乐，将会自动上传本地音乐文件。</p>
<p>但是这个上传的网络速度在国内貌似并不很好，上传的时间也根据网络速度而定。</p>
<h2><span id="整理音乐资料库">整理音乐资料库</span></h2><p>当你将自己的音乐都添加到 Apple Music 云端资料库之后，一个属于自己的私人音乐资料库便构建完成了，从此再也不要打开多个软件进行听歌了，只需要点击 Apple Music 应用图标，所有的音乐便全部掌握在手中，而且不要担心歌曲版权下架（Apple Music 在线资料库也存在音乐版权下架），属于自己的音乐永远在自己的资料库中。</p>
<p>而接下来就应该对自己的音乐库进行整理，特别是对通过其他音乐软件添加的音乐进行整理。因为往往从网上下载的音乐，其歌曲信息极有可能不完整，比如缺少专辑图片、缺少专辑发行年份等等。作为一个轻微强迫症患者，我不允许我的资料库出现这种混乱的现象，所以需要对资料库的信息进行整理，而 Apple Music 在这方面做的非常的出色。</p>
<h3><span id="更改歌曲信息">更改歌曲信息</span></h3><p>在歌曲列表中可以自定义显示的歌曲参数，如“专辑艺人”、“类型”、“年份”等，我们可以直接在歌曲列表中对这些信息进行编辑。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS05OTQzODc2NGY0ODhkZDQxLnBuZw?x-oss-process=image/format,png" alt="自定义显示的歌曲参数"></p>
<p>选择某个音乐右击“显示简介”或者 <code>Command + I</code> 可以查看具体某一个音乐的信息，还可以对音乐的插图、歌词进行修改。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS01YmIxNTNmZTljYzE4NTRlLnBuZw?x-oss-process=image/format,png" alt="显示简介" style="zoom:50%;">


<p>Apple Music 的强大之处便是在此，可以非常直观地对资料库中所有的歌曲信息进行修改。</p>
<h3><span id="创建智能播放列表">创建智能播放列表</span></h3><p>当歌曲的信息都被正确地写入之后，我们便可以按照自己的意愿随意地欣赏资料库中的音乐。例如我们可以按照流派、年代以及歌曲情绪来听歌。而这一切都得益于 Apple Music 的智能播放列表。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS04NDAyZDAxNzVlNTRjMGI1LnBuZw?x-oss-process=image/format,png" alt="创建智能播放列表"></p>
<p>点击“文件”&gt;“新建智能播放列表”，弹出条件筛选对话框。例如我想收听 21 世纪 00 年代的华语音乐，我可以设置为“年份在 2000 至 2010 范围内”且“类型是国语流行”的音乐，点击确定，你资料库中符合条件的音乐就自动组成了一个播放列表。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1jY2IyNmRkYWVjMjExYTcxLnBuZw?x-oss-process=image/format,png" alt="条件筛选对话框" style="zoom:67%;">


<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS05YjMzZTgyODJiZmFlYWU0LnBuZw?x-oss-process=image/format,png" alt="自动组成了一个播放列表"></p>
<p>不仅如此，我们在听音乐时可以对歌曲标记星级来代表我们对歌曲的喜爱程度，这样在建立智能播放列表的时候就可以根据自己的喜爱程度建立。</p>
<h2><span id="小结">小结</span></h2><p>整理好自己的音乐资料库确实不是一件简单的事情，我们需要投入我们的时间与精力，而正是我们对于这种对音乐认真与执着，本着生命在于折腾的观念，让我们在挑选每一首歌的时候都非常的慎重。摆脱了流媒体音乐的各种推送和广告之后，我的音乐软件变成了一个单纯的音乐载体，它更像是一本回忆录，每听到每一首歌的时候，都可以想起第一次听到这首歌时的场景。这样纯粹的音乐播放器虽然“减”去了很多东西，但却“增”加了我对于音乐本身的理解与感悟。戴上耳机，尽情享受音乐最纯粹的乐趣吧！</p>
]]></content>
      <categories>
        <category>数字生活</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>苹果</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo 和 GitHub 搭建自己的个人博客平台</title>
    <url>/2020/04/22/%E4%BD%BF%E7%94%A8%20Hexo%20%E5%92%8C%20GitHub%20%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>版权声明：</strong> <em>本文所有内容均为 @EchoForger 的个人博客 <a href="https://www.wildptr.cn">WildPtr 野指针</a>的原创内容，转载请务必注明作者与原文链接，且不得篡改原文内容。</em></p>
</blockquote>
<p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 是一个高效、简洁的博客框架，我们可以使用其丰富的插件和主题快速地搭建属于自己的博客平台。<a href="https://github.com" target="_blank" rel="noopener">GitHub</a> 则作为代码仓库在云端托管所搭建的网站，尽管 GitHub 在国内的速度有点不尽人意，但是作为个人博客的载体还是绰绰有余。接下来就让我手把手地教各位在 macOS 环境下使用 Hexo 和 GitHub 搭建自己的个人博客平台。</p>
<h2><span id="准备工作">准备工作</span></h2><h3><span id="安装-nodejs">安装 Node.js</span></h3><p>前往 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js 官网</a>安装 Node.js (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)。</p>
<h3><span id="安装-git">安装 Git</span></h3><p>如果安装了 <a href="https://developer.apple.com/xcode/" target="_blank" rel="noopener">Xcode</a> 则可以跳过此步骤，因为苹果在 XCode 中携带了 Git 的二进制包。</p>
<p>通过 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 安装 Git，先安装 Homebrew。打开“终端”，并执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot;</span><br></pre></td></tr></table></figure>

<p>安装 Git。终端执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<h3><span id="安装-hexo">安装 Hexo</span></h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。“终端”执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2><span id="建站">建站</span></h2><h3><span id="创建网站文件夹">创建网站文件夹</span></h3><p>新建一个空的文件夹，“终端”执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p><code>&lt;folder&gt;</code> 是新建文件夹的路径，可以将文件夹拖至“终端”窗口中，将自动输入文件夹路径。</p>
<p>命令执行完成后，文件夹的结构如下图所示。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1jODFhMmVlNzU4ZjY2NjdhLnBuZw?x-oss-process=image/format,png" alt="文件夹的结构" style="zoom:67%;">


<h3><span id="选取主题">选取主题</span></h3><p>前往 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 官网的主题页面</a>选择主题，点击主题名称可以前往该主题的源码仓库。<img src="https://upload-images.jianshu.io/upload_images/23107301-02da7e7e5a1d9f4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" Hexo 官网的主题页面
"></p>
<p>下载主题的源码，解压并放入网站文件夹中的 <code>theme</code> 子文件夹中。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS01ZDNhOWEwNjRiYzI3YzE2LnBuZw?x-oss-process=image/format,png" alt="下载主题的源码"></p>
<p>修改 <code>_config.yml</code> 中的 <code>theme</code> 值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: &lt;theme folder name&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;theme folder name&gt;</code> 为主题的文件夹名称，例如：</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS0zODQ0NjJlMDMwMTY0MmM1LnBuZw?x-oss-process=image/format,png" alt="修改 _config.yml 中的 theme 值" style="zoom:67%;">


<p>这样便成功地修改了博客的主题。</p>
<h3><span id="配置网站">配置网站</span></h3><p>网站的配置信息储存在 <code>_config.yml</code>（注意这里的 <code>_config.yml</code> 是网站根目录下的）中，打开文件进行修改。这里只介绍几个简单的参数。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>title</code></td>
<td>网站标题</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>网站副标题</td>
</tr>
<tr>
<td><code>author</code></td>
<td>您的名字</td>
</tr>
<tr>
<td><code>theme</code></td>
<td>主题文件夹名称</td>
</tr>
<tr>
<td><code>deploy</code></td>
<td>部署信息</td>
</tr>
</tbody></table>
<h2><span id="部署至-github">部署至 GitHub</span></h2><h3><span id="创建仓库">创建仓库</span></h3><p>首先，需要在 GitHub 上<a href="https://github.com/join" target="_blank" rel="noopener">创建一个账户</a>。</p>
<p>在 GitHub 上创建一个 <code>repository</code></p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS01YjU5MzViYmI2OGQ5YWYzLnBuZw?x-oss-process=image/format,png" alt="创建一个 repository" style="zoom:50%;">


<p>其命名方式为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">username.github.io</span><br></pre></td></tr></table></figure>

<p>其中 <code>username</code> 为 GitHub 用户名。</p>
<h3><span id="配置网站">配置网站</span></h3><p>修改 <code>_config.yml</code> 中的 <code>deploy</code> 值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &lt;repo address&gt;</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p><code>&lt;repo address&gt;</code>  为新建仓库的地址。例如：<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS0zYThlZGZiNTg3ZjNkNDNjLnBuZw?x-oss-process=image/format,png" alt="修改 _config.yml 中的 deploy 值"></p>
<h3><span id="安装-deployer-git">安装 Deployer Git</span></h3><p>“终端”执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3><span id="部署">部署</span></h3><p>“终端”执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>第一行语句用来生成网页静态文件，第二行语句将网页内容上传至 GitHub 仓库。</p>
<p>过程中需要输入 GitHub 的用户名的密码。当执行 <code>hexo deploy</code> 时，Hexo 会将 <code>public</code> 目录中的文件和目录推送至 <code>_config.yml</code> 中指定的远端仓库和分支中，并且<strong>完全覆盖</strong>该分支下的已有内容。</p>
<p>部署完成后，便可以通过 <code>username.github.io</code> 访问新搭建的博客了！</p>
<h3><span id="更新网站内容">更新网站内容</span></h3><p>若在本地对网站进行了更改，需要对云端托管的代码进行更新，应该先生成网页的静态文件，然后将其部署至云端。“终端”执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Markdown 进行高效写作</title>
    <url>/2020/04/25/%E4%BD%BF%E7%94%A8%20Markdown%20%E8%BF%9B%E8%A1%8C%E9%AB%98%E6%95%88%E5%86%99%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p><strong>版权声明：</strong> <em>本文所有内容均为 @EchoForger 的个人博客 <a href="https://www.wildptr.cn">WildPtr 野指针</a>的原创内容，转载请务必注明作者与原文链接，且不得篡改原文内容。</em></p>
</blockquote>
<p>在现在这个信息化的时代，用电脑进行写作已经成为了主流。然而，在电脑上写作也有着很多和传统写作中不可避免的缺点，比如说在使用 Word 或者 Pages 等文稿软件进行写作的时候，我们往往要注重排版、文字大小以及图片的处理，而这些其他的因素却会分离我们的注意力，使我们无法真正的集中地进行写作。不仅如此，如果我们的文章需要发布到不同的平台，还往往需要针对不同的平台进行排版，这必会加大我们的时间耗费。</p>
<p>正是由于这些种种不利的原因，“Markdown” 应运而生了，使用 Markdown 进行写作时，便完全不需要担心以上的种种问题，只需要全身心的投入到写作本身。正因如此，Markdown 成为了一种当下十分流行且高效的写作方式。</p>
<h2><span id="什么是-markdown">什么是 Markdown</span></h2><p>Markdown 并不是一款写作软件，而是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。比如下面这一段文字，左边是 Markdown 语言的源码，而右边是通过渲染之后得到的文本样式。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS03ZDQwYzk1ZDBhZTJmMzZmLnBuZw?x-oss-process=image/format,png" alt="源码和渲染文本对比"></p>
<p>可以看出 Markdown 的本质其实是一个纯文本文件，只记录了你所输入的文本以及文本的层次关系，而不直接记录你的文本是什么样式。最终根据主题（.css 文件进行渲染）。它比纯文本的功能更强，仅仅只需要简单的语法，就可以显示比纯文本更丰富的内容，所以很多人都使用它写博客。不仅如此，Markdown 在网络上也被广泛的支持。很多博客平台以及网络文章发布平台都很好地支持 Markdown，所以说 Markdown 是一种当下十分流行且高效的写作方式。</p>
<h2><span id="markdown-语法">Markdown 语法</span></h2><p>Markdown 本质上是一门语言，要想熟练地使用 Markdown 进行写作，首先需要的就是掌握 Markdown 的语法。而目前为止并没有哪一个机构对 Markdown 语法进行严格的规定，但业界比较认可的是 GitHub 所制定的 GFM 标准。在这里我将只对 Markdown 的基本语法进行简单的介绍，详细了解请参考 <a href="https://github.github.com/gfm/" target="_blank" rel="noopener">GitHub Flavored Markdown Spec 文档</a>。</p>
<h3><span id="标题">标题</span></h3><p>标题通过在文字前插入 1 到 6 个 <code>#</code> 来实现，一级标题插入一个 <code>#</code> ，三级标题插入三个 <code>#</code> 来实现，在 <code>#</code> 后面跟一个空格。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure>

<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS01ZmJiNGRiOGUxZjMwYzRiLnBuZw?x-oss-process=image/format,png" alt="标题" style="zoom:67%;">


<h3><span id="文本样式">文本样式</span></h3><p>利用简单的标记便可以对文本样式进行修改，例如：</p>
<table>
<thead>
<tr>
<th>样式</th>
<th>例子</th>
<th>实际效果</th>
</tr>
</thead>
<tbody><tr>
<td>加粗</td>
<td><code>**文本**</code></td>
<td><strong>文本</strong></td>
</tr>
<tr>
<td>斜体</td>
<td><code>*文本*</code></td>
<td><em>文本</em></td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;u&gt;文本&lt;/u&gt;</code></td>
<td><u>文本</u></td>
</tr>
<tr>
<td>删除线</td>
<td><code>~~文本~~</code></td>
<td><del>文本</del></td>
</tr>
<tr>
<td>高亮</td>
<td><code>==文本==</code></td>
<td>==文本==</td>
</tr>
<tr>
<td>代码</td>
<td><code>`文本`</code></td>
<td><code>文本</code></td>
</tr>
<tr>
<td>链接</td>
<td><code>[WildPtr 野指针](http://www.wildptr.cn)</code></td>
<td><a href="http://www.wildptr.cn">WildPtr 野指针</a></td>
</tr>
</tbody></table>
<h3><span id="图片">图片</span></h3><p>Markdown 文件中并不会保存图片本身，而是通过链接的方式引用图片。链接指向的可以是本地的图片，也可以是网络上的图片。要插入图片，只需要在编辑器里写 <code>![图片描述](图片链接)</code> 即可。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![WildPtr 野指针](https:&#x2F;&#x2F;www.wildptr.cn&#x2F;about&#x2F;logo.jpg)</span><br></pre></td></tr></table></figure>

<p>下图是实际的显示效果：</p>
<img src="https://www.wildptr.cn/about/logo.jpg" alt="WildPtr 野指针" style="zoom:33%;">


<p>当然，使用这种方法插入图片也有其缺点。比如在其他电脑上打开 Markdown 文件时，必须保证图片路径正确，否则还是无法显示图片。另外，若是将 Markdown 文章上传到网络上，图片网站往往也无法读取本地的图片，我们也需要将本地图片上传到互联网上，这就需要借助图床来托管我们的图片。</p>
<h3><span id="代码">代码</span></h3><p>Markdown 支持高亮显示代码，你只需要在代码块前一行单独输入 <code>````然后在后面紧跟代码语言，并在代码块后一行单独输入</code> ```，便可以高亮显示代码了。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">​&#96;&#96;&#96;C++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">得到的效果如下：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;C++</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="数学公式">数学公式</span></h3><p>Markdown 支持数学公式的输入，你只需要在公式前一行单独输入 <code>$$</code> ，并在公式后一行单独输入 <code>$$</code> 。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">E_k&#x3D;&#123;1 \over 2&#125;mv^2</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>得到的效果如下：<br>$$<br>E_k={1 \over 2}mv^2<br>$$<br>其中 <code>_</code> 表示下标，<code>^</code> 表示上标，使用 <code>{}</code> 框起来的部分被作为一个整体，<code>\over</code> 用来表示分数线。</p>
<p>还有例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\vec F &#x3D; m \vec a</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>\vec F = m \vec a<br>$$</p>
<p>其中 <code>\vec</code> 表示矢量。</p>
<h3><span id="列表">列表</span></h3><p>Markdown 可以输入多种列表，分别是<strong>有序列表</strong>、<strong>无序列表</strong>和<strong>任务列表</strong>。</p>
<p>有序列表使用 <code>x. 文本</code> 表示，注意文本前有一个小空格。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第 1 步</span><br><span class="line">2. 第 2 步</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<ol>
<li>第 1 步</li>
<li>第 2 步</li>
</ol>
<p>无序列表使用 <code>- 文本</code> 表示，注意文本前也有一个小空格。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 选项 A</span><br><span class="line">- 选项 B</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<ul>
<li>选项 A</li>
<li>选项 B</li>
</ul>
<p>任务列表使用 <code>- [ ] 文本</code> 或 <code>- [x] 文本</code> 表示，前者表示未完成任务，后者表示已完成任务，注意文本前和括号前各有一个小空格。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [ ] 任务 1</span><br><span class="line">- [x] 任务 2</span><br></pre></td></tr></table></figure>

<p>显示效果如下：</p>
<ul>
<li><input disabled type="checkbox"> 任务 1</li>
<li><input checked disabled type="checkbox"> 任务 2</li>
</ul>
<h3><span id="表格">表格</span></h3><p>不得不说在 Markdown 中表示表格还是有点反人类的，非常的不直观，而且打的时候很容易出现错误。比如一个表格要写成下面这种形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|   标签   |    表头 1  |   表头 2   |</span><br><span class="line">| ---- | ---- | ---- |</span><br><span class="line">|    项 1 |   数据  |   数据   |</span><br><span class="line">|    项 2 |   数据  |   数据   |</span><br></pre></td></tr></table></figure>

<p>这是显示效果：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>表头 1</th>
<th>表头 2</th>
</tr>
</thead>
<tbody><tr>
<td>项 1</td>
<td>数据</td>
<td>数据</td>
</tr>
<tr>
<td>项 2</td>
<td>数据</td>
<td>数据</td>
</tr>
</tbody></table>
<h2><span id="超好用的-markdown-写作软件typora">超好用的 Markdown 写作软件：Typora</span></h2><p>在基本了解的 Markdown 语法之后，你便可以轻松地使用这门新的写作语言进行写作了。然而“工欲善其事，必先利其器”，一款好的写作软件往往能让我们事半功倍，在这里给各位推荐一款超好用的写作软件：<a href="https://www.typora.io" target="_blank" rel="noopener">Typora</a>。</p>
<p>Typora 是一款超级轻量的 Markdown 写作软件，界面十分简洁，就只有一块写作区域，其他什么都没有，真是极简之极。但是在这么简洁的界面下，Typora 的功能却毫不逊色。可谓是“麻雀虽小，五脏俱全”。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1kNzE4YjEyNTI3M2FhZjdkLnBuZw?x-oss-process=image/format,png" alt="Typora 极简的写作界面" style="zoom: 67%;">


<p>不得不说，Typora 绝对是我用过最好的写作软件，它可以让你全神贯注地专注写作，不被任何事物所打扰。因为它与其他 Markdown 写作软件不同，Typora 将 Markdown 源码和最终呈现的画面融为一体，一句话就是：写得舒服。</p>
<p>主流的很多 Markdown 写作工具基本都是左边源码右边显示文章预览，这样的呈现方式始终让我们需要同时关注源码和预览画面两个窗口，这就使得我们的注意力无法全神贯注地集中在写作上。而 Typora 则以一种非常优雅的方式解决了这个问题，它的解决方案是：当你的光标在某一部分文字附近时，便会显示这一部分文字的源码，而其它的文字保持不变，始终是文章所最终呈现的样子。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS0zMTgyYTljN2ZkNWFjMDI3LnBuZw?x-oss-process=image/format,png" alt="Typora 与其他 Markdown 软件对比"></p>
<h3><span id="切换源码模式">切换源码模式</span></h3><p>在之前说了这么多的 Markdown 语法，然而在 Typora 中写作时，就算临时忘记了具体的语法也无伤大雅，因为在 Typora 的菜单中有着丰富的操作选项，足以替代我们使用 Markdown 语法来改变文字样式。</p>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS04ZTJjYTM4YTRkMWIyMzEyLnBuZw?x-oss-process=image/format,png" alt="操作菜单" style="zoom:50%;">


<p>因为 Typora 是默认隐藏源代码的，所以若想查看文章的 Markdown 源码，只需要在选择”显示“&gt;“源代码模式”或者使用快捷键 <code>Command + /</code>，就可以将其切换成源码模式。</p>
<h3><span id="更换文章主题">更换文章主题</span></h3><p>由于 Markdown 只是记录了文章的层级关系和文字信息，所以文章最终的显示样式是由主题决定的。Typora 内置了多种主题，只需要在“主题”菜单中切换即可。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8yMzEwNzMwMS1hMDBkNDU3ZDE5YzM2NDIyLnBuZw?x-oss-process=image/format,png" alt="同一篇文章在不同主题下的样式"></p>
<p>Typora 默认自带了 6 款主题，若想使用更多的主题，只需要前往 <a href="http://theme.typora.io" target="_blank" rel="noopener">Typora 的主题商店</a>下载即可。</p>
<p>下载的主题文件为 <code>.css</code> 格式，将主题文件拷贝到 <code>Typora 的主题文件夹</code> 然后重启软件即可使用。主题文件夹的位置可以在软件的 <code>偏好设置</code> 中找到。</p>
<h2><span id="小结">小结</span></h2><p>关于 Markdown 写作的内容就介绍到这里，不得不说使用 Typora 进行 Markdown 写作真的是一种全新的体验，保存的 <code>.md</code> 文件可以直接上传到各大文章发布平台，或者直接复制 Markdown 源码即可。还在等什么，快去试试这种高效的写作方法吧。</p>
]]></content>
      <categories>
        <category>数字生活</category>
      </categories>
      <tags>
        <tag>网站</tag>
        <tag>博客</tag>
        <tag>写作</tag>
        <tag>Markdown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划：背包问题</title>
    <url>/2020/04/26/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%9A%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>版权声明：</strong> <em>本文所有内容均为 @EchoForger 的个人博客 <a href="https://www.wildptr.cn">WildPtr 野指针</a>的原创内容，转载请务必注明作者与原文链接，且不得篡改原文内容。</em></p>
</blockquote>
<p>今天来简单聊聊动态规划中典型的背包问题。</p>
<h2><span id="01-背包问题">01 背包问题</span></h2><p>先来看看下面这样一道题目吧。</p>
<blockquote>
<h2><span id="problem-description">Problem Description</span></h2><p>Many years ago , in Teddy’s hometown there was a man who was called “Bone Collector”. This man like to collect varies of bones , such as dog’s , cow’s , also he went to the grave …<br>The bone collector had a big bag with a volume of V ,and along his trip of collecting there are a lot of bones , obviously , different bone has different value and different volume, now given the each bone’s value along his trip , can you calculate out the maximum of the total value the bone collector can get ?</p>
<p><a href="https://www.wildptr.cn/2020/04/25/Bone%20Collector/">查看原题</a></p>
</blockquote>
<p>题目的意思大概是这样的：有一位“骨头收藏家”喜欢收集骨头，每一块骨头的体积 w[i] 和价值 v[i] 都已知，而他装骨头的袋子容量只有 V，计算他能够获得骨头的最大价值。</p>
<p>“背包问题”获取最大利益，乍一看确实是贪心算法，但这也是一道典型的动态规划问题。动态规划是算法设计方法之一，是用来求得最优解的数学方法。</p>
<p>假设我们使用一个函数 <code>rec(i,j)</code> 来表示“从第 i 块骨头开始拿重量不超过 j 的最大收益”，那么对于第 i 块骨头，有如下几种情况。</p>
<ul>
<li>剩余空间 j 小于第 i 块骨头的体积，无法拿这一块骨头，那么对于从第 i+1 块骨头开始拿获得的最大收益有 <code>rec(i,j)=rec(i+1,j)</code></li>
<li>可以拿得下这一块骨头，选择拿或者不拿。若拿，则对于从第 i+1 块骨头开始拿获得的最大收益有 <code>rec(i,j)=rec(i+1,j-w[i])+v[i]</code>；若不拿，则与拿不下相同 <code>rec(i,j)=rec(i+1,j)</code>。而我们要选择这两者众较大的一个才算最大收益。</li>
</ul>
<p>这样我们便得到了函数的递推关系，这种递推关系被称为“状态转移方程”，使用代码表示则为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(i==N) res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(j&lt;w[i]) res=rec(i+<span class="number">1</span>,j);</span><br><span class="line">    <span class="keyword">else</span> res=<span class="built_in">max</span>(rec(i+<span class="number">1</span>,j),rec(i+<span class="number">1</span>,j-w[i])+v[i]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这样会产生很多重复的函数调用，特别是当 N 比较大的时候，程序运行时间会以指数形式增长。所以我们可以使用一个动态规划数组将计算过的函数值保存起来，当需要调用的时候可以直接从数组中访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rec</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DP[i][j]!=<span class="number">-1</span>)&#123;         <span class="comment">//判断是否存在数据</span></span><br><span class="line">        <span class="keyword">return</span> DP[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> DP[i][j]=res;	     <span class="comment">//将值记录在数组中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(DP,<span class="number">-1</span>,<span class="keyword">sizeof</span>(DP));  <span class="comment">//初始化数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先在主函数中使用 <code>memset</code> 函数将数组初始化为 <code>-1</code>，为了和保存的元素做区别。函数在返回计算值的同时将值保存在数组中。</p>
<h3><span id="逆向递推">逆向递推</span></h3><p>既然对于每一种情况的最优解都保存在了数组中，那在进行动态规划的时候，我们可以直接初始化数组。数组初始化的方法就是利用得到的状态转移方程，即递推关系，之后可以重复利用动态规划的结果，省去了多余的函数调用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&lt;w[i]) DP[i][j]=DP[i+<span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">else</span> DP[i][j]=<span class="built_in">max</span>(DP[i+<span class="number">1</span>][j],DP[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="正向递推">正向递推</span></h3><p>上面的递推关系是逆向的，从最后一块骨头递推到第一块，即 i 从 N-1 到 0。我们也可以从正向递推，这时的 <code>DP[i+1][j]</code> 被定义为”从前 i 块骨头中选取体积不超过 j 所获取的最大收益“，递推关系写成代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&lt;w[i]) DP[i+<span class="number">1</span>][j]=DP[i][j];</span><br><span class="line">            <span class="keyword">else</span> DP[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(DP[i][j],DP[i][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此外，除了运用递推方式逐项求解之外，还可以把状态转移想象成从“前 i 个物品中选取总重不超过 j 时的状态”向“前 i+1 个物品中选取总重不超过 j”和“前 i+1 个物品中选取总重不超过 j+w[i] 时的状态”的转移，于是可以实现成如下形式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">            DP[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(DP[i+<span class="number">1</span>][j],DP[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j+w[i]&lt;=V) DP[i+<span class="number">1</span>][j+w[i]]=<span class="built_in">max</span>(DP[i+<span class="number">1</span>][j+w[i]],DP[i][j]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用以上知识便可以解决之前提到的问题了，你可以<a href="https://www.wildptr.cn/2020/04/25/Bone%20Collector/">查看原题</a>获取这一题的题解。</p>
<h2><span id="完全背包问题">完全背包问题</span></h2><p>上文所提到的可选择的物品个数有限的背包问题称为”01 背包问题“，假如可选择的每一种物品数量不限，则被称为“完全背包问题”。</p>
<p>若将上文题目改为每种骨头可以选择任意多的数量，就变成了一道完全背包问题。</p>
<p>我们还是设 <code>DP[i+1][j]</code> 表示“从前 i 块骨头中选取体积不超过 j 所获取的最大收益”，假设对于第 i 种骨头选了 k 块，而要选择其中收益最高的方法，则有：<code>DP[i+1][j]=max{DP[i][j-k*w[i]]+k*v[i]|k&gt;=0}</code>，使用代码表示如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>; k*w[i]&lt;=j; k++) &#123;</span><br><span class="line">                DP[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(DP[i][j-k*w[i]]+k*v[i],DP[i+<span class="number">1</span>][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样多加了一层循环，使得算法的复杂度再次提升。不难发现，在 <code>DP[i+1][j]</code> 中选择 k (k&gt;=1) 个与在 <code>DP[i+1][j-w[i]]</code> 中选择 k-1 个，计算出来的结果相同。所以选择 k (k&gt;=1) 个的部分在之前的计算中已经的得出过，那么可以简化状态转移方程。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DP[i+1][j]&#x3D;max&#123;DP[i][j-k*w[i]]+k*v[i]|k&gt;&#x3D;0&#125;</span><br><span class="line">          &#x3D;max(DP[i][j],max&#123;DP[i][j-k*w[i]]+k*v[i]|k&gt;&#x3D;1&#125;)</span><br><span class="line">          &#x3D;max(DP[i][j],max&#123;DP[i][j-k*w[i]-w[i]]+k*v[i]+v[i]|k&gt;&#x3D;0&#125;)</span><br><span class="line">          &#x3D;max(DP[i][j],DP[i+1][j-w[i]]+v[i])</span><br></pre></td></tr></table></figure>

<p>而如上状态转移方程使用代码表示便为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> DP[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=V; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j&lt;w[i]) DP[i+<span class="number">1</span>][j]=DP[i][j];</span><br><span class="line">            <span class="keyword">else</span> DP[i+<span class="number">1</span>][j]=<span class="built_in">max</span>(DP[i][j],DP[i+<span class="number">1</span>][j-w[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看一下另外一道完全背包问题。</p>
<blockquote>
<h2><span id="problem-description">Problem Description</span></h2><p>Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid. </p>
<p>But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs! </p>
<p><a href="https://www.wildptr.cn/2020/04/26/Piggy-Bank/">查看原题</a></p>
</blockquote>
<p>题目意思是说已知存钱罐内钱的质量 W（题目要求输入的是装满钱的存钱罐重量和空的存钱罐重量）和已知的 N 种硬币的价值 p[i] 和质量 w[i]，求存钱罐内的钱至少价值多少。</p>
<p>这道题与之前提到的背包问题有所不同：</p>
<ol>
<li>这道题要求质量正好等于 W。那么我们的动态规划数组就可以考虑定义一个一维的数组，令 <code>DP[j]</code> 表示质量为 j 时所储存的钱的最小价值。</li>
<li>由于是要求最小值，便只需要将数组初始化为无穷大即可。</li>
</ol>
<p>综上，状态转移方程为 <code>DP[j]=min(DP[j],DP[j-w[i]]+p[i])</code>，写成代码就是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=w[i]; j&lt;=W; j++) &#123;</span><br><span class="line">            DP[j]=<span class="built_in">min</span>(DP[j],DP[j-w[i]]+p[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可以<a href="https://www.wildptr.cn/2020/04/26/Piggy-Bank/">查看原题</a>获取这一题的题解。</p>
<p>解决动态规划问题的关键可以归纳如下：</p>
<ul>
<li>找准动态规划的变量：谁是“物体”谁是“背包”。往往选取变化范围小的变量作为动态规划的变量，否则程序循环的范围将会非常大，很有可能超时。</li>
<li>找准状态转移方程。</li>
</ul>
<p>关于以上两点，可以利用下面这道题进行简单的操练。</p>
<blockquote>
<h2><span id="problem-description">Problem Description</span></h2><p>The aspiring Roy the Robber has seen a lot of American movies, and knows that the bad guys usually gets caught in the end, often because they become too greedy. He has decided to work in the lucrative business of bank robbery only for a short while, before retiring to a comfortable job at a university.</p>
<img src="http://acm.hdu.edu.cn/data/images/con211-1010-1.jpg" alt="img" style="zoom: 25%;">

<p>For a few months now, Roy has been assessing the security of various banks and the amount of cash they hold. He wants to make a calculated risk, and grab as much money as possible.<br>His mother, Ola, has decided upon a tolerable probability of getting caught. She feels that he is safe enough if the banks he robs together give a probability less than this.</p>
<p><a href="https://www.wildptr.cn/2020/04/27/Robberies/">查看原题</a></p>
</blockquote>
<p>题目意思是有一个劫匪要抢银行，每个银行被抢一次后就会关门，每一个银行可以抢到的现金 m[i] 和抢完之后劫匪可能被抓的机率 p[i] 已知，求在劫匪被抓机率低于 P 时可以获取的最大现金。</p>
<p>虽然笔者觉得这道题目的价值观可能出了点点小问题，但是不妨碍它作为一道学习动态规划的好题目。</p>
<p>按照之前的思路我们来分析这一道题目，方法如下：</p>
<ul>
<li><p>找准动态规划的变量。这道题的变量有被抓概率和现金，要求现金的最大值和被抓概率的最小值。一般的思路是将被抓概率作为“背包”，将现金作为“物品”，然而对于这道题，这样子恐怕行不通。因为每个抢每个银行的被抓概率与总的被抓概率不是简单的求和关系，而是如下关系：<br>$$<br>P=1-\prod_{i=1}^N(1-p[i])<br>$$<br>所以这道题我们应该将 p[i] 表示成不被抓的机率，即逃脱机率，则关系如下：<br>$$<br>P_{逃脱}=\prod_{i=1}^Np_{逃脱}[i]<br>$$<br>这样就转化为求抢劫现金 j 下逃脱的最大概率，保存在数组 <code>DP[j]</code> 中，然后再求满足 <code>DP[j]&gt;=1-P</code> 条件下 j 的最大值即可。</p>
</li>
<li><p>找准状态转移方程。因为每个银行被抢一次后就会关门，所以这题是“01 背包问题”。<code>DP[j]</code> 代表逃脱概率的最大值，所以有状态转移方程：<code>DP[j]=max(DP[j],DP[j-m[i]]*(1-p[i]))</code></p>
</li>
</ul>
<p>综上所述，这道问题便迎刃而解了，你可以<a href="https://www.wildptr.cn/2020/04/27/Robberies/">查看原题</a>来查看这道题的答案。</p>
<h2><span id="小结">小结</span></h2><p>动态规划确实是算法学习中的重点和难点，本文简单探讨了笔者对动态规划中的经典问题“背包问题”的浅显理解，以后会持续更新。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>数塔</title>
    <url>/2020/04/30/%E6%95%B0%E5%A1%94/</url>
    <content><![CDATA[<hr>
<p><center>Source: <a href="http://acm.hdu.edu.cn/showproblem.php?pid=2084" target="_blank" rel="noopener">HDUOJ 2084</a></center></p>

<h2><span id="problem-description">Problem Description</span></h2><p>在讲述DP算法的时候，一个经典的例子就是数塔问题，它是这样描述的：</p>
<p>有如下所示的数塔，要求从顶层走到底层，若每一步只能走到相邻的结点，则经过的结点的数字之和最大是多少？</p>
<img src="http://acm.hdu.edu.cn/data/images/2084-1.jpg" style="zoom:75%;">

<p>已经告诉你了，这是个DP的题目，你能AC吗?</p>
<h2><span id="input">Input</span></h2><p>输入数据首先包括一个整数C,表示测试实例的个数，每个测试实例的第一行是一个整数N(1 &lt;= N &lt;= 100)，表示数塔的高度，接下来用N行数字表示数塔，其中第i行有个i个整数，且所有的整数均在区间[0,99]内。</p>
<h2><span id="output">Output</span></h2><p>对于每个测试实例，输出可能得到的最大和，每个实例的输出占一行。</p>
<h2><span id="sample-input">Sample Input</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0 </span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br></pre></td></tr></table></figure>

<h2><span id="sample-output">Sample Output</span></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure>

<h2><span id="my-solution">My Solution</span></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> DP[<span class="number">100</span>+<span class="number">1</span>][<span class="number">100</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> tower[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">floor</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;<span class="built_in">floor</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">floor</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;tower[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(DP,<span class="number">0</span>,<span class="keyword">sizeof</span>(DP));</span><br><span class="line">        DP[<span class="number">0</span>][<span class="number">0</span>]=tower[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        DP[<span class="number">1</span>][<span class="number">1</span>]=tower[<span class="number">1</span>][<span class="number">1</span>]+DP[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">floor</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    DP[i+<span class="number">1</span>][j]=tower[i+<span class="number">1</span>][j]+DP[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(j==i)&#123;</span><br><span class="line">                    DP[i+<span class="number">1</span>][j]=tower[i+<span class="number">1</span>][j]+<span class="built_in">max</span>(DP[i][j],DP[i][j<span class="number">-1</span>]);</span><br><span class="line">                    DP[i+<span class="number">1</span>][j+<span class="number">1</span>]=tower[i+<span class="number">1</span>][j+<span class="number">1</span>]+DP[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    DP[i+<span class="number">1</span>][j]=tower[i+<span class="number">1</span>][j]+<span class="built_in">max</span>(DP[i][j],DP[i][j<span class="number">-1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">floor</span>; i++) &#123;</span><br><span class="line">            res=<span class="built_in">max</span>(res,DP[<span class="built_in">floor</span><span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM 题目</category>
      </categories>
      <tags>
        <tag>ACM</tag>
        <tag>算法</tag>
        <tag>HDUOJ</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
</search>
